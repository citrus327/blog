{"pageProps":{"html":"<h1 dir=\"auto\">使用rollup构建library的一次尝试</h1>\n<blockquote>\n<p dir=\"auto\">因为在设计博客和CMS的时候，有一个设想就是在CMS里去编辑md，同时实时预览，这个预览和实际提交在博客上展示要求完全一致。所以就想着自己弄一个预览模块，在两个项目之前共享代码。这就涉及到一个Markdown Preview的工具。这个工具其实就是从MD =&gt; HTML，使用highlight.js做代码高亮，一些自定义的配置和样式文件，然后打包成一个js包。</p>\n<p dir=\"auto\">这个打包环节其实是想用webpack打一个umd的包就得了，但是一直知道有个rollup的工具存在，非常轻量，同时Vue.js也是通过rollup打包的，所以就想做出一次尝试。以下是阅读文档，结合awesome rollup仓库总结的一些经验。</p>\n<p dir=\"auto\">同时本文只会涉及到一些rollup相关的，关于markdown处理会再开一篇文章记录。</p>\n</blockquote>\n<h2 dir=\"auto\">起步</h2>\n<p dir=\"auto\"><a href=\"https://github.com/rollup/rollup\">rollup github地址</a></p>\n<p dir=\"auto\"><a href=\"https://rollupjs.org/guide/en/\" rel=\"nofollow\">官方文档</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/rollup/rollup-starter-lib\">官方提供的构建library的模板</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/rollup/awesome\">awesome-rollup</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/phshy0607/markdown-preview\">本文涉及到的源码</a></p>\n<h2 dir=\"auto\">package.json</h2>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;name&quot;: &quot;my-package&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;main&quot;: &quot;dist/my-package.js&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-package<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.1.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"main\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/my-package.js<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">通常，包内的package.json通常用有一个叫main的属性，他说明的是本包的内容是在<code class=\"notranslate\">dist/my-package.js</code>中。</p>\n<p dir=\"auto\">像Webpack, Browserify之类的bundler会解析这个main, 然后引入main属性对应的js，同时根据dependencies去载入相应依赖。<br>\n在第三方打包时一般都会优先选用umd的包，因为这样浏览器也可以使用，所以一般第三方的lib的main属性通常都是umd的包。</p>\n<p dir=\"auto\">而rollup属于ES2015-aware的工具，在rollup内使用CJS或者UMD并不是最理想的情况，因为无法使用ES6 module的特性。<br>\n如果对方在使用rollup作为他的bundler, 而也说了rollup属于ES2015-aware的工具，他会优先读取package.json里的module属性，如果没有，才会读main属性，这样既可以保证一般bundler可以正常解析文件，同时在使用rollup的时候会优先读取module里的es包。</p>\n<p dir=\"auto\">所以package.json就会变成：</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;name&quot;: &quot;my-package&quot;,\n  &quot;version&quot;: &quot;0.1.0&quot;,\n  &quot;main&quot;: &quot;dist/my-package.umd.js&quot;,\n  &quot;module&quot;: &quot;dist/my-package.esm.js&quot;\n}\"><pre>{\n  <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>my-package<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>0.1.0<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"main\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/my-package.umd.js<span class=\"pl-pds\">\"</span></span>,\n  <span class=\"pl-ent\">\"module\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>dist/my-package.esm.js<span class=\"pl-pds\">\"</span></span>\n}</pre></div>\n<p dir=\"auto\">这对于打出的包来说属于双赢。<br>\n具体可以查看<a href=\"https://github.com/rollup/rollup/wiki/pkg.module\">官方对于这种做法的解释</a></p>\n<h2 dir=\"auto\">配置文件</h2>\n<p dir=\"auto\"><a href=\"https://rollupjs.org/guide/en/#configuration-files\" rel=\"nofollow\">配置文件详细文档</a></p>\n<blockquote>\n<p dir=\"auto\">rollup的配置文件可以使用es6语法编写<br>\n使用-c来指定config文件，默认读取根目录下rollup.config.js</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  rollup -c\n  rollup --config\n  rollup -c build/rollup.config.js\"><pre>  rollup -c\n  rollup --config\n  rollup -c build/rollup.config.js</pre></div>\n<p dir=\"auto\">这里也放出我用的配置文件</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import resolve from '@rollup/plugin-node-resolve'\nimport commonjs from 'rollup-plugin-commonjs'\nimport pkg from './package.json'\nimport dev from 'rollup-plugin-dev'\nimport postcss from 'rollup-plugin-postcss'\nimport { string } from &quot;rollup-plugin-string&quot;\nimport { terser } from 'rollup-plugin-terser'\n\nconst devServerConfig = {\n  port: 3000\n}\n\nconst plugins = function (format) {\n  const commonPlugins = [\n    dev(devServerConfig),\n    postcss({\n      extract: false\n    }),\n    string({\n      include: &quot;**/*.md&quot;,\n    }),\n    terser()\n  ]\n  if (format === 'umd') {\n    return [\n      ...commonPlugins,\n      resolve(),\n      commonjs(),\n    ]\n  } else {\n    return commonPlugins\n  }\n}\n\nexport default [\n  // for browser\n  {\n    input: 'src/index.js',\n    output: {\n      name: 'MarkdownPreview',\n      file: pkg.browser,\n      format: 'umd'\n    },\n    plugins: plugins('umd')\n  },\n\n  // for cjs and esm\n  {\n    input: 'src/index.js',\n    external: Object.keys(pkg.dependencies),\n    output: [\n      {file: pkg.main, format: 'cjs'},\n      {file: pkg.module, format: 'es'},\n    ],\n    plugins: plugins()\n  }\n]\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">resolve</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'@rollup/plugin-node-resolve'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">commonjs</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'rollup-plugin-commonjs'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">pkg</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./package.json'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">dev</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'rollup-plugin-dev'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">postcss</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'rollup-plugin-postcss'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">string</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">\"rollup-plugin-string\"</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">terser</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'rollup-plugin-terser'</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">devServerConfig</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">port</span>: <span class=\"pl-c1\">3000</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">plugins</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">format</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">commonPlugins</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>\n    <span class=\"pl-en\">dev</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">devServerConfig</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">postcss</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">extract</span>: <span class=\"pl-c1\">false</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">string</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">include</span>: <span class=\"pl-s\">\"**/*.md\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">terser</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">]</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">format</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'umd'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">[</span>\n      ...<span class=\"pl-s1\">commonPlugins</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-en\">commonjs</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">]</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">commonPlugins</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-kos\">[</span>\n  <span class=\"pl-c\">// for browser</span>\n  <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">input</span>: <span class=\"pl-s\">'src/index.js'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">output</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'MarkdownPreview'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">file</span>: <span class=\"pl-s1\">pkg</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">browser</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-c1\">format</span>: <span class=\"pl-s\">'umd'</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">plugins</span>: <span class=\"pl-en\">plugins</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'umd'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n\n  <span class=\"pl-c\">// for cjs and esm</span>\n  <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">input</span>: <span class=\"pl-s\">'src/index.js'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">external</span>: <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">pkg</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dependencies</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">output</span>: <span class=\"pl-kos\">[</span>\n      <span class=\"pl-kos\">{</span><span class=\"pl-c1\">file</span>: <span class=\"pl-s1\">pkg</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">main</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">format</span>: <span class=\"pl-s\">'cjs'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">{</span><span class=\"pl-c1\">file</span>: <span class=\"pl-s1\">pkg</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">module</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">format</span>: <span class=\"pl-s\">'es'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">plugins</span>: <span class=\"pl-en\">plugins</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">]</span></pre></div>\n<h2 dir=\"auto\">常用依赖</h2>\n<ol dir=\"auto\">\n<li><a href=\"https://github.com/rollup/rollup-plugin-commonjs\">rollup-plugin-commonjs</a><br>\n支持解析commonjs包至es6 module</li>\n<li><a href=\"https://github.com/rollup/plugins/tree/master/packages/node-resolve\">@rollup/plugin-node-resolve</a><br>\n支持解析node_modules里的包 之前的包<a href=\"https://github.com/rollup/rollup-plugin-node-resolve\">rollup-plugin-node-resolve</a>已经archive了且不再维护</li>\n<li><a href=\"https://github.com/vuejs/rollup-plugin-vue\">rollup-plugin-vue</a></li>\n<li><a href=\"https://github.com/konsumer/rollup-plugin-jsx\">rollup-plugin-jsx</a></li>\n<li><a href=\"https://github.com/xiaofuzi/rollup-plugin-md\">rollup-plugin-md</a></li>\n<li><a href=\"https://github.com/TrySound/rollup-plugin-terser\">rollup-plugin-terser</a></li>\n<li><a href=\"https://github.com/TrySound/rollup-plugin-string\">rollup-plugin-string</a></li>\n</ol>\n<h2 dir=\"auto\">坑</h2>\n<ol dir=\"auto\">\n<li><a href=\"https://github.com/TrySound/rollup-plugin-uglify\">rollup-plugin-uglify</a><br>\n因为之前没有用过<a href=\"https://github.com/terser/terser\">terser</a>作为minify的工具，所以选择了rollup-plugin-uglify<br>\n打包esm的时候竟然不支持es6语法。terser官方也说了这个问题，</li>\n</ol>\n<blockquote>\n<p dir=\"auto\">Why choose terser?<br>\nuglify-es is no longer maintained and uglify-js does not support ES6+.<br>\nterser is a fork of uglify-es that mostly retains API and CLI compatibility with uglify-es and uglify-js@3.</p>\n</blockquote>\n<p dir=\"auto\">所以使用rollup-plugin-terser作为minify工具。</p>"},"__N_SSG":true}