{"pageProps":{"html":"<h1 dir=\"auto\">VS Code中使用Webpack alias后代码的Import与eslint兼容</h1>\n<h2 dir=\"auto\">说明</h2>\n<p dir=\"auto\">在项目中使用基于airbnb的lint规则，但配置完alias后，出现无法跳转，import/no-resolved规则报错等问题，调研几个小时，最终得出了解决方案，在此记录分享。</p>\n<h2 dir=\"auto\">方案</h2>\n<p dir=\"auto\">关于跳到引入文件位置的问题：</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// jsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;jsx&quot;: &quot;react&quot;, // 支持jsx后缀\n    &quot;module&quot;: &quot;commonjs&quot;, // commonjs规则，自动使用index.js作为入口\n    &quot;target&quot;: &quot;es6&quot;,\n    &quot;paths&quot;: { // alias配置\n      &quot;@/*&quot;: [&quot;src/*&quot;]\n    },\n    &quot;baseUrl&quot;: &quot;./&quot; // 配合paths\n  }\n}\"><pre><span class=\"pl-ii\">// jsconfig.json</span>\n{\n  <span class=\"pl-ent\">\"compilerOptions\"</span>: {\n    <span class=\"pl-ent\">\"jsx\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>react<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-ii\">// 支持jsx后缀</span>\n    <span class=\"pl-ent\">\"module\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>commonjs<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-ii\">// commonjs规则，自动使用index.js作为入口</span>\n    <span class=\"pl-ent\">\"target\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>es6<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"paths\"</span>: { <span class=\"pl-ii\">// alias配置</span>\n      <span class=\"pl-ent\">\"@/*\"</span>: [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>src/*<span class=\"pl-pds\">\"</span></span>]\n    },\n    <span class=\"pl-ent\">\"baseUrl\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>./<span class=\"pl-pds\">\"</span></span> <span class=\"pl-ii\">// 配合paths</span>\n  }\n}</pre></div>\n<p dir=\"auto\">很多人会忽略这个jsconfig配置，仅配置paths和baseUrl。若仅配置paths和baseUrl，使用ctrl + left click将无法定位到引入文件位置，jsx和module的配置很关键。</p>\n<p dir=\"auto\">关于eslint：</p>\n<p dir=\"auto\">若使用airbnb的lint规则或者使用eslint-import-plugin，会无法识别webpack或者工程内的alias编译配置，关于这个问题可以使用相应的<a href=\"https://github.com/benmosher/eslint-plugin-import/blob/master/README.md#resolvers\">resolvers配置</a>。</p>\n<p dir=\"auto\">可以使用eslint-import-resolver-webpack这个包作为resolver配置，例</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// eslintrc.js\nmodule.exports = {\n  // ...\n\tsettings: {\n    // ...\n    'import/resolver': {\n      webpack: {\n        config: './config/webpack/webpack.base.js',\n      },\n    },\n  },\n  // ...\n}\"><pre><span class=\"pl-c\">// eslintrc.js</span>\n<span class=\"pl-smi\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">exports</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// ...</span>\n\t<span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// ...</span>\n    <span class=\"pl-s\">'import/resolver'</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">webpack</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">config</span>: <span class=\"pl-s\">'./config/webpack/webpack.base.js'</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">// ...</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">这里的问题在于如果使用umi/cra/icejs等三方boilerplate搭建出的项目，可能没有webpack config，这里你会需要创建一个假的webpack配置，或者直接写webpack配置到eslintrc.js</p>\n<p dir=\"auto\">如果想绕过这个webpack配置，可以使用eslint-import-resolver-custom-alias这个包，配置如下</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// eslintrc.js\nmodule.exports = {\n  // ...\n\tsettings: {\n    // ...\n    'import/resolver': {\n      'eslint-import-resolver-custom-alias': {\n        alias: {\n          '@': './src',\n        },\n        extensions: ['.js', '.jsx'],\n      },\n    }\n  },\n  // ...\n}\"><pre><span class=\"pl-c\">// eslintrc.js</span>\n<span class=\"pl-smi\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">exports</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// ...</span>\n\t<span class=\"pl-c1\">settings</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// ...</span>\n    <span class=\"pl-s\">'import/resolver'</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">'eslint-import-resolver-custom-alias'</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">alias</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s\">'@'</span>: <span class=\"pl-s\">'./src'</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">extensions</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'.js'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'.jsx'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">// ...</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">以上两个方案推荐使用eslint-import-resolver-custom-alias，简单方便且脱离webpack</p>"},"__N_SSG":true}