{"pageProps":{"html":"<h1 dir=\"auto\">2019年底面试题整理</h1>\n<blockquote>\n<p dir=\"auto\">本篇涵盖了从网上搜刮的面试题和自己平时理解不太深刻的问题，作为一种知识积累的方式。</p>\n</blockquote>\n<h2 dir=\"auto\">HTML</h2>\n<h3 dir=\"auto\">HTML5新特性</h3>\n<ol dir=\"auto\">\n<li>语义化元素</li>\n<li>一些新的属性contentediable，spellcheck等</li>\n<li>input的新类型：date, email, url等</li>\n</ol>\n<h3 dir=\"auto\">meta标签的作用</h3>\n<ol dir=\"auto\">\n<li>seo 优化</li>\n<li>viewreport 设置手机端适配</li>\n<li>设置 charset 字符编码</li>\n</ol>\n<div class=\"highlight highlight-text-html-basic notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;meta name=&quot;keywords&quot; content=&quot;电商,物流&quot; /&gt;\n&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;\n&lt;meta charset=&quot;utf-8&quot; /&gt;\"><pre><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">meta</span> <span class=\"pl-c1\">name</span>=\"<span class=\"pl-s\">keywords</span>\" <span class=\"pl-c1\">content</span>=\"<span class=\"pl-s\">电商,物流</span>\" /&gt;\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">meta</span> <span class=\"pl-c1\">name</span>=\"<span class=\"pl-s\">viewport</span>\" <span class=\"pl-c1\">content</span>=\"<span class=\"pl-s\">width=device-width, initial-scale=1.0</span>\" /&gt;\n<span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">meta</span> <span class=\"pl-c1\">charset</span>=\"<span class=\"pl-s\">utf-8</span>\" /&gt;</pre></div>\n<h3 dir=\"auto\">CSS是否影响Html解析，js解析，html渲染？</h3>\n<p dir=\"auto\">DOM解析与CSS解析是并行的，CSSOM TREE和DOM TREE完成后，会合并成为render tree。</p>\n<p dir=\"auto\">也是为何css解析不影响html解析，但是影响html渲染。</p>\n<p dir=\"auto\">js操作可以改变html和css样式，因为浏览器会维持顺序，所以css会阻止后面js的执行。</p>\n<p dir=\"auto\"><a href=\"https://segmentfault.com/a/1190000018130499\" rel=\"nofollow\">Reference</a></p>\n<h3 dir=\"auto\">onload事件与DOMContentLoaded</h3>\n<ol dir=\"auto\">\n<li>onload会等待所有的资源加载完成（html, css, js, 图片, 视频等）</li>\n<li>如果页面中同时存在css和js，并且存在js在css后面，则DOMContentLoaded事件会在css加载完后才执行</li>\n<li>其他情况下，DOMContentLoaded都不会等待css加载，并且DOMContentLoaded事件也不会等待图片、视频等其他资源加载。<br>\n<a href=\"https://segmentfault.com/a/1190000018130499\" rel=\"nofollow\">Reference</a></li>\n</ol>\n<h3 dir=\"auto\">Worker</h3>\n<p dir=\"auto\">为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p>\n<h3 dir=\"auto\">CSS和JS的位置会影响页面效率</h3>\n<ol dir=\"auto\">\n<li>css不会阻止html解析</li>\n<li>css会阻止html渲染（css加载完成之前，会白屏）</li>\n<li>css会阻止js运行</li>\n</ol>\n<h3 dir=\"auto\">用一个div模拟textarea的实现</h3>\n<p dir=\"auto\">给div标签加<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/contenteditable\" rel=\"nofollow\">contenteditable</a>属性就能实现textarea的编辑功能了</p>\n<h3 dir=\"auto\">图片懒加载怎么实现</h3>\n<p dir=\"auto\">判断img标签是否在可视区域，如果可视，加载图片，否则不加载。</p>\n<p dir=\"auto\">因为src如果有值，会直接加载，所以是用一个data-src存放图片地址，等到图片在可视范围内，再把值apply到src上。</p>\n<p dir=\"auto\">判断可视区域可以用offset自己去算，或者是用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\" rel=\"nofollow\">element.getBoundingClientRect</a>去获取dom位置。</p>\n<p dir=\"auto\">但是这些都会触发reflow, 有个API叫做<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver\" rel=\"nofollow\">IntersectionObserver</a>，可以动态的监测dom是否可视。</p>\n<h3 dir=\"auto\">repaint重绘和reflow回流</h3>\n<p dir=\"auto\">Repaint:</p>\n<ul dir=\"auto\">\n<li>dom元素的视觉效果改变，但是不涉及任何排版布局改变</li>\n<li>主要针对单一元素的重绘</li>\n<li>例如：1. color修改，text-align，hover引起的颜色变化以及任何不改变dom结构变化的变化</li>\n</ul>\n<p dir=\"auto\">Reflow:</p>\n<ul dir=\"auto\">\n<li>dom元素的位置，结构变化</li>\n<li>因为这些变化会让浏览器重新计算dom元素所在位置和所占空间，<br>\n这些变化大多针对整个页面，所以reflow要比repaint消耗的多</li>\n<li>例如：\n<ol dir=\"auto\">\n<li>margin/padding</li>\n<li>修改dom节点结构</li>\n<li>animation/transition 每一帧都会引起reflow</li>\n<li>读取元素某些属性的时候：offsetTop/top等, getComputedStyle()<br>\n这些属性需要依赖一些元素去计算，所以会触发reflow</li>\n<li>scroll页面, resize页面</li>\n<li>字体大小变化</li>\n</ol>\n</li>\n</ul>\n<h3 dir=\"auto\">如何优化reflow</h3>\n<ol dir=\"auto\">\n<li>减少dom之间相互依赖，减少dom层级</li>\n<li>少用复杂动画</li>\n<li>减少使用css中的运算式</li>\n<li>少改class，特别是子元素很多的</li>\n<li>批量更新元素样式，然后设置为一个class，一下附在dom上</li>\n</ol>\n<h2 dir=\"auto\">CSS</h2>\n<h3 dir=\"auto\">盒子模型</h3>\n<ol dir=\"auto\">\n<li>盒子具有content, padding, margin, border</li>\n<li>box-sizing:\n<ul dir=\"auto\">\n<li>默认为content-box，width和height指定为content的高宽</li>\n<li>border-box, width和height会为border+padding+content的高宽</li>\n</ul>\n</li>\n</ol>\n<h3 dir=\"auto\">css绘制平行四边形</h3>\n<p dir=\"auto\">父元素transform: skewX(-45deg);</p>\n<p dir=\"auto\">子元素transform: skewX(45deg)</p>\n<h3 dir=\"auto\">元素居中</h3>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">行元素</p>\n<ul dir=\"auto\">\n<li>单行行元素，可以height = line-height或者固定上下padding</li>\n<li>多行行元素可以用flex</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\">块元素</p>\n<ul dir=\"auto\">\n<li>子元素absolute定位，top:50%, transition: translateY(-50%)</li>\n<li>父元素table, 子元素table-cell, vertical-align: middle</li>\n<li>flex</li>\n</ul>\n</li>\n</ol>\n<p dir=\"auto\">全居中</p>\n<ol dir=\"auto\">\n<li>absolute + top: 50% + left: 50% + translate(-50%, -50%)</li>\n<li>flex</li>\n<li>父要求有高度position: absolute; top: 0; left: 0; right: 0; bottom: 0; margin: auto;</li>\n</ol>\n<h3 dir=\"auto\">Postion values</h3>\n<ol dir=\"auto\">\n<li>static 是默认值</li>\n<li>relative 相对定位 相对于自身原有位置进行偏移，仍处于标准文档流中</li>\n<li>absolute 绝对定位 相对于最近的已定位的祖先元素, 有已定位(指position不是static的元素)祖先元素, 以最近的祖先元素为参考标准。如果无已定位祖先元素, 以body元素为偏移参照基准, 完全脱离了标准文档流。</li>\n<li>fixed 固定定位的元素会相对于视窗来定位,这意味着即便页面滚动，它还是会停留在相同的位置。一个固定定位元素不会保留它原本在页面应有的空隙。</li>\n</ol>\n<h3 dir=\"auto\">css 优先级</h3>\n<ol dir=\"auto\">\n<li>内联样式权重：1000</li>\n<li>id 选择器权重：0100</li>\n<li>类选择器，属性选择器，伪类选择器权重：0010</li>\n<li>元素选择器，伪元素选择器权重：0001</li>\n<li>通配选择器 *，子选择器 &gt;，相邻选择器 +。权重：0000</li>\n</ol>\n<p dir=\"auto\">css的覆盖顺序跟css的样式声明顺序有关<br>\ncss声明的越靠后，优先级越高</p>\n<h3 dir=\"auto\">使用css实现一个持续的动画效果</h3>\n<div class=\"highlight highlight-source-css notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"#box {\n  width: 30px;\n  height: 30px;\n  background-color: gray;\n  animation-name: myAnimation;  /* 动画名称 */\n  animation-duration: 2s; /* 动画持续时间 */\n  animation-timing-function: ease-in; /* 运动函数 */\n  animation-delay: 500ms; /* 动画起始延迟 */\n  animation-iteration-count: infinite; /* 动画重复次数 */\n  animation-direction: alternate;\n  /**\n  * 动画执行方向\n  * normal: 每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认属性。\n  * alternate: 动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向\n  * reverse: 反向运行动画，每周期结束动画由尾到头运行\n  * alternate-reverse: 反向交替， 反向开始交替\n  */\n}\n\n@keyframes myAnimation {\n  20% {\n    transform: translateY(20px); /* 向下20px */\n  }\n\n  50% {\n    transform: translateY(40px); /* 再向下20px */\n  }\n\n  100% {\n    transform: translate(40px, 20px); /* 再向右移动20px */\n  }\n}\"><pre><span class=\"pl-kos\">#</span><span class=\"pl-c1\">box</span> {\n  <span class=\"pl-c1\">width</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">30<span class=\"pl-smi\">px</span></span>;\n  <span class=\"pl-c1\">height</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">30<span class=\"pl-smi\">px</span></span>;\n  <span class=\"pl-c1\">background-color</span><span class=\"pl-kos\">:</span> gray;\n  <span class=\"pl-c1\">animation-name</span><span class=\"pl-kos\">:</span> myAnimation;  <span class=\"pl-c\">/* 动画名称 */</span>\n  <span class=\"pl-c1\">animation-duration</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">2<span class=\"pl-smi\">s</span></span>; <span class=\"pl-c\">/* 动画持续时间 */</span>\n  <span class=\"pl-c1\">animation-timing-function</span><span class=\"pl-kos\">:</span> ease-in; <span class=\"pl-c\">/* 运动函数 */</span>\n  <span class=\"pl-c1\">animation-delay</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">500<span class=\"pl-smi\">ms</span></span>; <span class=\"pl-c\">/* 动画起始延迟 */</span>\n  <span class=\"pl-c1\">animation-iteration-count</span><span class=\"pl-kos\">:</span> infinite; <span class=\"pl-c\">/* 动画重复次数 */</span>\n  <span class=\"pl-c1\">animation-direction</span><span class=\"pl-kos\">:</span> alternate;\n  <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">  * 动画执行方向</span>\n<span class=\"pl-c\">  * normal: 每个循环内动画向前循环，换言之，每个动画循环结束，动画重置到起点重新开始，这是默认属性。</span>\n<span class=\"pl-c\">  * alternate: 动画交替反向运行，反向运行时，动画按步后退，同时，带时间功能的函数也反向</span>\n<span class=\"pl-c\">  * reverse: 反向运行动画，每周期结束动画由尾到头运行</span>\n<span class=\"pl-c\">  * alternate-reverse: 反向交替， 反向开始交替</span>\n<span class=\"pl-c\">  */</span>\n}\n\n<span class=\"pl-k\">@keyframes</span> myAnimation {\n  <span class=\"pl-c1\">20<span class=\"pl-smi\">%</span></span> {\n    <span class=\"pl-c1\">transform</span><span class=\"pl-kos\">:</span> <span class=\"pl-en\">translateY</span>(<span class=\"pl-c1\">20<span class=\"pl-smi\">px</span></span>); <span class=\"pl-c\">/* 向下20px */</span>\n  }\n\n  <span class=\"pl-c1\">50<span class=\"pl-smi\">%</span></span> {\n    <span class=\"pl-c1\">transform</span><span class=\"pl-kos\">:</span> <span class=\"pl-en\">translateY</span>(<span class=\"pl-c1\">40<span class=\"pl-smi\">px</span></span>); <span class=\"pl-c\">/* 再向下20px */</span>\n  }\n\n  <span class=\"pl-c1\">100<span class=\"pl-smi\">%</span></span> {\n    <span class=\"pl-c1\">transform</span><span class=\"pl-kos\">:</span> <span class=\"pl-en\">translate</span>(<span class=\"pl-c1\">40<span class=\"pl-smi\">px</span></span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">20<span class=\"pl-smi\">px</span></span>); <span class=\"pl-c\">/* 再向右移动20px */</span>\n  }\n}</pre></div>\n<h3 dir=\"auto\">使用js实现一个持续的动画效果 requestAnimationFrame</h3>\n<ol dir=\"auto\">\n<li>若你想在浏览器下次重绘之前继续更新下一帧动画，那么回调函数自身必须再次调用window.requestAnimationFrame()</li>\n<li><code class=\"notranslate\">window.requestAnimationFrame(callback)</code>回调函数内参数是一个时间戳为Performance.now()</li>\n<li>返回一个动画ID，可以使用<code class=\"notranslate\">window.cancelAnimationFrame()</code>取消</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const $box = document.getElementById('box')\nfunction myAnimation(timestamp) {\n  $box.style.width = `${$box.clientWidth + 1}px` // 每次调用的时候，都把宽度+1\n  requestAnimationFrame(myAnimation) // 调用requestAnimationFrame去执行本函数，每次执行完之后，会继续执行动画\n}\nmyAnimation()\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">$box</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">document</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getElementById</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'box'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">myAnimation</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">timestamp</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">$box</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">style</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">width</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">$box</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">clientWidth</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">}</span></span>px`</span> <span class=\"pl-c\">// 每次调用的时候，都把宽度+1</span>\n  <span class=\"pl-en\">requestAnimationFrame</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">myAnimation</span><span class=\"pl-kos\">)</span> <span class=\"pl-c\">// 调用requestAnimationFrame去执行本函数，每次执行完之后，会继续执行动画</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">myAnimation</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">左右布局：左边定宽、右边自适应，不少于3种方法</h3>\n<ol dir=\"auto\">\n<li>float left + overflow:hidden</li>\n<li>float + margin:left</li>\n<li>float:left + (float:right, calc)</li>\n<li>flex: 外容器flex, 左边定宽，右边flex: 1撑满</li>\n</ol>\n<h3 dir=\"auto\">BFC</h3>\n<p dir=\"auto\"><a href=\"%E9%A1%B5%E9%9D%A2\">/css/BFC.html</a><br>\nBFC是一个类似独立的隔离容器（脱离文档流），floating可以创建BFC.<br>\nfloat的元素会脱离文档流，如果他的父元素也是个BFC，那他们2个元素都会在BFC里，就在这个独立的容器内了。<br>\n触发条件：</p>\n<ol dir=\"auto\">\n<li>overflow不是visible</li>\n<li>浮动元素</li>\n<li>绝对定位元素</li>\n<li>非块级元素（inline-block等）</li>\n<li>根元素（html）或其他包含它的元素<br>\nBFC内会触发�边距坍塌，但是2个不同的BFC就不会触发</li>\n</ol>\n<p dir=\"auto\">clear: left/clear: right/clear: both<br>\n清除元素2边的浮动。例：clear:left如果施加在某个元素，那么这个元素左边的浮动元素就不是浮动元素了</p>\n<h2 dir=\"auto\">JS</h2>\n<h3 dir=\"auto\">事件传播</h3>\n<p dir=\"auto\">事件捕获阶段，处于目标阶段，时间冒泡阶段<br>\n<code class=\"notranslate\">event.stopPropagation()</code> 阻止事件继续传播，即取消进一步的事件捕获或冒泡</p>\n<h3 dir=\"auto\">箭头函数与普通函数区别</h3>\n<ol dir=\"auto\">\n<li>箭头函数的this指向为声明位置的this指向，而普通function则为由他实例化的对象本身</li>\n</ol>\n<h3 dir=\"auto\">call与apply的区别</h3>\n<p dir=\"auto\">call有N个参数，第一个参数是上下文，之后的参数就会传给目标函数，逐个列出<br>\napply有2个参数，第一个参数是上下文，第二个参数是参数的数组</p>\n<h3 dir=\"auto\">宏事件，微事件</h3>\n<p dir=\"auto\"><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\" rel=\"nofollow\">任务队列</a><br>\n<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" rel=\"nofollow\">阮老师的Event Loop文章</a><br>\n<a href=\"https://vimeo.com/96425312\" rel=\"nofollow\">Philip Roberts: Help, I’m stuck in an event-loop.</a><br>\n事件循环：</p>\n<ol dir=\"auto\">\n<li>所有的同步事件都在主线程上运行，形成一个<strong>执行栈 (execution context stack)</strong></li>\n<li>如果碰到异步事件，则推入<strong>任务队列（task queue)</strong></li>\n<li>一旦<strong>执行栈</strong>同步任务执行完，则会读取<strong>任务队列</strong>，按照一定顺序执行<strong>任务队列</strong>里的方法。</li>\n<li>循环</li>\n</ol>\n<p dir=\"auto\">所以如果想要模拟这个<a href=\"https://www.jsv9000.app/\" rel=\"nofollow\">场景</a>，需要一个Call Stack, Task Queue, Microtask Queue</p>\n<ol dir=\"auto\">\n<li>同步事件进入Call Stack，直接执行</li>\n<li>如果遇到异步任务<br>\nA. 如果是宏任务，加入Task Queue<br>\nB. 如果是微任务，加入Microtask Queue</li>\n<li>当前Call Stack空栈后，开始清空Microtask Queue</li>\n<li>此时Call Stack空栈，Microtask Queue被清空，轮到UI renderer</li>\n<li>开始执行清空Task Queue</li>\n<li>循环</li>\n</ol>\n<p dir=\"auto\">微任务 &gt;&gt; UI Render &gt;&gt; 宏任务</p>\n<p dir=\"auto\">微任务包括 promise.resolve, promise.catch, MutationObserver</p>\n<p dir=\"auto\">宏任务包括 setTimeout, setInterval, requestAnimationFrame</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"async function async1() {\n  console.log('async1 start');\n  await async2();\n  console.log('async1 end');\n}\nasync function async2() {\n    console.log('async2');\n}\nconsole.log('script start');\nsetTimeout(function() {\n    console.log('setTimeout');\n}, 0)\nasync1();\nnew Promise(function(resolve) {\n    console.log('promise1');\n    resolve();\n}).then(function() {\n    console.log('promise2');\n});\nconsole.log('script end');\"><pre><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">async1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'async1 start'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">async2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'async1 end'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">async2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'async2'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'script start'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'setTimeout'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-en\">async1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'promise1'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'promise2'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'script end'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<h3 dir=\"auto\">sort</h3>\n<p dir=\"auto\"><a href=\"https://blog.csdn.net/k346k346/article/details/51154786\" rel=\"nofollow\">https://blog.csdn.net/k346k346/article/details/51154786</a></p>\n<ol dir=\"auto\">\n<li>冒泡排序：双层遍历，对比前后两个节点，如果满足条件，位置互换，直到遍历结束。</li>\n<li>快速排序：去数组中间的那一个数，然后遍历所有数，小于该数的push到一个数组，大于该数的push到另外一个数组，然后递归去排序这两个数组，最后将所有结果连接起来。</li>\n<li>选择排序：声明一个数组，每次去输入数组里面找数组中的最大值或者最小值，取出来后push到声明的数组中，直到输入数组为空。</li>\n</ol>\n<h3 dir=\"auto\">js Array</h3>\n<p dir=\"auto\"><a href=\"https://juejin.im/entry/59ae664d518825244d207196\" rel=\"nofollow\">https://juejin.im/entry/59ae664d518825244d207196</a></p>\n<h3 dir=\"auto\">requestAnimatedFrame</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"505497246\" data-permission-text=\"Title is private\" data-url=\"https://github.com/haizlin/fe-interview/issues/1341\" data-hovercard-type=\"issue\" data-hovercard-url=\"/haizlin/fe-interview/issues/1341/hovercard\" href=\"https://github.com/haizlin/fe-interview/issues/1341\">haizlin/fe-interview#1341</a></p>\n<h3 dir=\"auto\">addeventlistener在父节点，监听子节点点击事件 =&gt; 事件委托</h3>\n<h3 dir=\"auto\">原型链继承，instance of, ES6 ES5的继承区别, 如何实现一个 new</h3>\n<p dir=\"auto\"><a href=\"https://github.com/ziyi2/js/blob/master/JS%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF.md\">https://github.com/ziyi2/js/blob/master/JS%E7%B1%BB%E5%92%8C%E7%BB%A7%E6%89%BF.md</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.say = function () {\n  console.log(`I'm Person, my name is ${this.name}, my age is ${this.age}`)\n}\nPerson.prototype.yell = function () {\n  console.log(`yell`)\n}\n\nfunction Student (name, age, score) {\n  Person.apply(this, arguments)\n  this.score = score\n}\n\n// 原型继承\nStudent.prototype = new Person()\n// 修改继承来的原型上的constructor为目标Student的constructor\nStudent.prototype.constructor = Student\n\nStudent.prototype.say = function () {\n  console.log(`I'm Student, my name is ${this.name}, my age is ${this.age}, my score is ${this.score}`)\n}\nStudent.prototype.studentYell = function () {\n  console.log(`student yell`)\n}\n\nvar p = new Person('a person', '22')\nvar derek = new Student('derek', '21', '321')\nderek.say()\nderek.yell()\nderek.studentYell()\nconsole.log(derek instanceof Person)\nconsole.log(derek instanceof Student)\n// p.studentYell() \"><pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`I'm Person, my name is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>, my age is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">yell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`yell`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Student</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">score</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">score</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 原型继承</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 修改继承来的原型上的constructor为目标Student的constructor</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Student</span>\n\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`I'm Student, my name is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>, my age is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">}</span></span>, my score is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">studentYell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`student yell`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a person'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'22'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">derek</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'derek'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'21'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'321'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">yell</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">studentYell</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">derek</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">derek</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// p.studentYell() </span></pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// new 方法实现\nfunction _new(fn, ...arg) {\n  const obj = Object.create(fn.prototype);\n  const ret = fn.apply(obj, arg);\n  return ret instanceof Object ? ret : obj;\n}\"><pre><span class=\"pl-c\">// new 方法实现</span>\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">_new</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">obj</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">ret</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">obj</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">arg</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">ret</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Object</span> ? <span class=\"pl-s1\">ret</span> : <span class=\"pl-s1\">obj</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">手写promise</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"504267965\" data-permission-text=\"Title is private\" data-url=\"https://github.com/haizlin/fe-interview/issues/1335\" data-hovercard-type=\"issue\" data-hovercard-url=\"/haizlin/fe-interview/issues/1335/hovercard\" href=\"https://github.com/haizlin/fe-interview/issues/1335\">haizlin/fe-interview#1335</a></p>\n<h3 dir=\"auto\">节流和防抖</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function debounce (fn, delay) {\n  let timer = null\n  return function () {\n    if (timer) {\n      console.log('cancel timer')\n      clearTimeout(timer)\n    }\n    timer = setTimeout(() =&gt; {\n      fn.apply(this, arguments)\n    }, delay)\n  }\n}\n\nfunction throttle (fn, delay) {\n  let canRun = true\n  return function () {\n    if (!canRun) {\n      return \n    }\n    canRun = false\n    fn.apply(this, arguments)\n    setTimeout(() =&gt; {\n      canRun = true\n    }, delay)\n  }\n}\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">debounce</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">timer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">timer</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'cancel timer'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">clearTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">timer</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">timer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">throttle</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">canRun</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> \n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span>\n    <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">实现页面加载进度条</h3>\n<h3 dir=\"auto\">postMessage</h3>\n<h3 dir=\"auto\">实现拖拽功能，比如把5个兄弟节点中的最后一个节点拖拽到节点1和节点2之间</h3>\n<h3 dir=\"auto\">手写parseInt的实现</h3>\n<h3 dir=\"auto\">WeakMap Map Set WeakSet</h3>\n<h3 dir=\"auto\">深度优先遍历和广度优先遍历, deep clone</h3>\n<h2 dir=\"auto\">浏览器与HTTP</h2>\n<h3 dir=\"auto\">http状态码</h3>\n<ol dir=\"auto\">\n<li>1**\t信息，服务器收到请求，需要请求者继续执行操作</li>\n<li>2**\t成功，操作被成功接收并处理 200</li>\n<li>3**\t重定向，需要进一步的操作以完成请求 304</li>\n<li>4**\t客户端错误，请求包含语法错误或无法完成请求 404</li>\n<li>5**\t服务器错误，服务器在处理请求的过程中发生了错误 500</li>\n</ol>\n<h3 dir=\"auto\">OSI 分层</h3>\n<ol dir=\"auto\">\n<li>应用层:<br>\nhttp协议，dhcp, ftp, pop3, smtp</li>\n<li>表示层:<br>\nSSL加密协议</li>\n<li>会话层:<br>\n会话层的作用就是为创建、管理和终止会话提供必要的方法，还负责管理和确定传输模式<br>\n（单向 全双工 半双工）</li>\n<li>传输层<br>\nTCP协议 UDP协议</li>\n<li>网络层<br>\nIP协议：ipv4, ipv6</li>\n<li>链路层</li>\n<li>物理层</li>\n</ol>\n<h3 dir=\"auto\">怎么发送一个跨域的POST请求, 同源策略？CSRF/clickjacking? CORS? JSONP? IFrame?</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"392476802\" data-permission-text=\"Title is private\" data-url=\"https://github.com/amandakelake/blog/issues/62\" data-hovercard-type=\"issue\" data-hovercard-url=\"/amandakelake/blog/issues/62/hovercard\" href=\"https://github.com/amandakelake/blog/issues/62\">amandakelake/blog#62</a><br>\nCORS（跨域资款共享）</p>\n<p dir=\"auto\">小提示：如果你回答跨域解决方案CORS，那么面试官一定会问你实现CORS的响应头信息Access-Control-Allow-Origin。</p>\n<p dir=\"auto\">什么是CORS<br>\nCORS（跨域资源共享 Cross-origin resource sharing）允许浏览器向跨域服务器发出XMLHttpRequest请求，从而克服跨域问题，它需要浏览器和服务器的同时支持。</p>\n<p dir=\"auto\">浏览器端会自动向请求头添加origin字段，表明当前请求来源。</p>\n<p dir=\"auto\">服务器端需要设置响应头的Access-Control-Allow-Methods，Access-Control-Allow-Headers，Access-Control-Allow-Origin等字段，指定允许的方法，头部，源等信息。</p>\n<p dir=\"auto\">请求分为简单请求和非简单请求，非简单请求会先进行一次OPTION方法进行预检，看是否允许当前跨域请求。</p>\n<h3 dir=\"auto\">从输入URL到看到页面发生的全过程，越详细越好。</h3>\n<ol dir=\"auto\">\n<li>输入网址</li>\n<li>DNS解析</li>\n<li>建立tcp连接</li>\n<li>客户端发送HTPP请求</li>\n<li>服务器处理请求　</li>\n<li>服务器响应请求</li>\n<li>浏览器展示HTML</li>\n<li>浏览器发送请求获取其他在HTML中的资源。</li>\n</ol>\n<h3 dir=\"auto\">TCP和UDP的区别</h3>\n<ul dir=\"auto\">\n<li>主要区别在于从数据完整上，session安全上等，UDP不可靠，TCP可靠。</li>\n<li>TCP协议在传送数据段的时候要给段标号；UDP协议不要</li>\n<li>TCP协议可靠；UDP协议不可靠</li>\n<li>TCP协议是面向连接；UDP协议采用无连接</li>\n<li>TCP协议负载较高，采用虚电路；UDP采用无连接</li>\n<li>TCP协议的发送方要确认接收方是否收到数据段（3次握手协议）</li>\n<li>TCP协议采用窗口技术和流控制</li>\n</ul>\n<h3 dir=\"auto\">三次握手，四次挥手</h3>\n<p dir=\"auto\">三次握手：</p>\n<p dir=\"auto\">A: 发送了</p>\n<p dir=\"auto\">B: 接受了，你能收到么</p>\n<p dir=\"auto\">A: 收到了，ok，我俩连上了</p>\n<p dir=\"auto\">四次挥手:</p>\n<p dir=\"auto\">tcp是全双工的，就是A 正在给 B发信息的同时，B也在给A发信息</p>\n<p dir=\"auto\">A: 我要关了</p>\n<p dir=\"auto\">B: 可能还有一个包要传输，你稍等</p>\n<p dir=\"auto\">B: OK, 我结束了。我这条消息你接到了，就可以关了</p>\n<p dir=\"auto\">A: 我收到了，我关了。</p>\n<p dir=\"auto\"><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" rel=\"nofollow\">Reference</a><br>\n<a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/15\" data-hovercard-type=\"issue\" data-hovercard-url=\"/Advanced-Frontend/Daily-Interview-Question/issues/15/hovercard\">Reference</a></p>\n<h3 dir=\"auto\">浏览器的缓存机制:强缓存 协商缓存</h3>\n<p dir=\"auto\">缓存机制可能存在的3种状态，缓存命中，缓存未命中，缓存验证再命中（验证缓存新鲜度）</p>\n<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">强缓存 200</p>\n<ul dir=\"auto\">\n<li>利用http头里的expires或cache-control两个字段控制</li>\n<li>这2个字段是在响应头里，也就是由浏览器本身验证</li>\n<li>当请求发出时，浏览器会判断目标资源是否命中强缓存</li>\n<li>如果命中，则直接取缓存，否则发请求</li>\n<li>expires与时间戳强耦合，所以其实会出现问题。cache-control就是解决这个问题的。</li>\n<li>cache-control允许传入max-age: 300000，因为传入的是时间段，所以解决了expires的时间戳耦合问题</li>\n<li>Cache-Control 相对于 expires 更加准确，它的优先级也更高。当 Cache-Control 与 expires 同时出现时，我们以 Cache-Control 为准\n<ul dir=\"auto\">\n<li>cache-control的一些细节描述：\n<ol dir=\"auto\">\n<li>no-store: 一切响应不缓存</li>\n<li>no-cache: 发送缓存之前，强制要求向原始服务器验证</li>\n<li>must-revalidate: 一旦资源过期，成功向服务器验证之前，缓存不能用该资源响应后续请求</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p dir=\"auto\">协商缓存 304</p>\n<ul dir=\"auto\">\n<li>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源</li>\n<li>肯定会访问服务器，所以是由服务器决定是否缓存。</li>\n<li>if-modified-since这个请求头会发送时间戳到服务器，服务器验证是否过期，如果没有过期，返回304</li>\n<li>如果过期了，会返回expires响应头和200状态码。下次请求if-modified-since就会以这个expires的时间戳再次请求。</li>\n</ul>\n</li>\n</ol>\n<p dir=\"auto\">优劣：</p>\n<ol dir=\"auto\">\n<li>协商缓存每次都会访问服务器</li>\n<li>强缓存如果服务器资源更新，可能会访问老接口，如果老接口下架了，就gg了</li>\n</ol>\n<p dir=\"auto\">缓存的意义在于减少服务器请求，更多使用本地资源。所以要让每次文件更新之后，让缓存失效。所以可以使用hash。<br>\nhtml使用协商缓存，js css使用强缓存</p>\n<h3 dir=\"auto\">浏览器路由实现</h3>\n<h3 dir=\"auto\">XSS CSRF</h3>\n<p dir=\"auto\">XSS: 跨站脚本攻击, 是指攻击者在网站上注入恶意的客户端代码，通过恶意脚本对客户端网页进行篡改，从而在用户浏览网页时，对用户浏览器进行控制或者获取用户隐私数据的一种攻击方式</p>\n<p dir=\"auto\">防范手段：</p>\n<ol dir=\"auto\">\n<li>http only cookie, 不允许js获取cookie</li>\n<li>输入检查，数据过滤</li>\n<li>输出检查</li>\n<li>使用HTTP头指定内容的类型，使得输出的内容避免被作为HTML解析 application/json</li>\n</ol>\n<p dir=\"auto\">CSRF，即 Cross Site Request Forgery，中译是跨站请求伪造，是一种劫持受信任用户向服务器发送非预期请求的攻击方式。</p>\n<p dir=\"auto\">CSRF 攻击往往是在用户不知情的情况下构造了网络请求</p>\n<ol dir=\"auto\">\n<li>使用验证码，强制要求用户与app交互，最终才能完成请求</li>\n<li>使用request header, referer，<br>\n如果访问者不是从指定路径来的，则为csrf攻击</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (req.headers.referer !== 'http://www.c.com:8002/') {\n    res.write('csrf 攻击');\n    return;\n}\"><pre><span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">req</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">headers</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">referer</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'http://www.c.com:8002/'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">res</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'csrf 攻击'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>csrf能成功是因为能够�截取用户的Cookie，要抵御这种攻击，可以在请求中带入一个参数，后端进行校验。<br>\n例如, jwt</li>\n</ol>\n<h3 dir=\"auto\">cookie token 优劣</h3>\n<ol dir=\"auto\">\n<li>首先token不是防止XSS的，而是为了防止CSRF的；</li>\n<li>CSRF攻击的原因是浏览器会自动带上cookie，而浏览器不会自动带上token</li>\n</ol>\n<p dir=\"auto\"><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/31\" data-hovercard-type=\"issue\" data-hovercard-url=\"/Advanced-Frontend/Daily-Interview-Question/issues/31/hovercard\">Reference</a></p>\n<h3 dir=\"auto\">介绍 HTTPS 握手过程</h3>\n<p dir=\"auto\">A: 发送了</p>\n<p dir=\"auto\">B: 接受了，请发送clientKey</p>\n<p dir=\"auto\">A: 给你我的KEY</p>\n<p dir=\"auto\">B: ok，收到了</p>\n<p dir=\"auto\"><a href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/70\" data-hovercard-type=\"issue\" data-hovercard-url=\"/Advanced-Frontend/Daily-Interview-Question/issues/70/hovercard\">Reference</a></p>\n<h3 dir=\"auto\">websocket</h3>\n<ol dir=\"auto\">\n<li>基于TCP的一个全双工通信协议，HTML5的新特性</li>\n<li>onclose, onerror, onmessage, onopen</li>\n<li>socket.close(); socket.send()</li>\n<li>兼容性ie &gt;= 10</li>\n</ol>\n<h2 dir=\"auto\">Vue</h2>\n<h3 dir=\"auto\">Computed 缓存实现和依赖收集实现</h3>\n<h3 dir=\"auto\">keep alive实现</h3>\n<h3 dir=\"auto\">vdom实现，differ算法，key的作用</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">简单描述一下Vue.js的render过程</p>\n<ol dir=\"auto\">\n<li>Vue文件会解析成3个片段，HTML会parse成AST</li>\n<li>解析成vdom</li>\n<li>映射成真实dom</li>\n<li>Mount</li>\n<li>如果数据变动，触发Object.defineProperty的setter</li>\n<li>differ原始vdom和新的vdom</li>\n<li>找到当中的区别, 变更differ出来的dom</li>\n</ol>\n</li>\n<li>\n<p dir=\"auto\">vdom:</p>\n<ol dir=\"auto\">\n<li>vdom其实就是代表真实dom的轻量js对象，他仅仅记录了部分需要的内容</li>\n<li>在操作dom的时候，可以先用vdom去计算到底有多少改动</li>\n<li>在一次dom操作中，直接进行变动，这样可以减少dom操作</li>\n<li>操作vdom并不是比真实dom操作快，毕竟如果已知dom的区别，直接操作dom肯定比操作vdom再映射区别的方式好，实际的原因是vdom其实只是充当一个中间层，能够帮助寻找新旧dom的区别，具有普适性，可以在可维护性和效率上达到一个平衡。</li>\n<li>目前Vue.js使用的vdom lib是 <a href=\"https://github.com/snabbdom/snabbdom\">snabbdom</a></li>\n</ol>\n</li>\n</ul>\n<p dir=\"auto\">总结一下就是为了找到dom变化而衍生出来的一种方式。</p>\n<ul dir=\"auto\">\n<li>differ算法 <a href=\"https://segmentfault.com/a/1190000008782928\" rel=\"nofollow\">Reference</a>:\n<ol dir=\"auto\">\n<li>形成新旧2个vnode tree</li>\n<li>从根节点往下进行differ, 同层比较。</li>\n<li>如果发现根节点不同，直接替换。否则继续之前的操作，直到整棵树遍历完全。</li>\n<li>patchVnode检查节点，patchVnode中调用updateChildren去differ子节点</li>\n<li>updateChildren:\n<ul dir=\"auto\">\n<li>updateChildren是通过设定头尾2个指针，向中间遍历，也就是oldStartIndex, oldEndIndex, newStartIndex, newEndIndex</li>\n<li>循环条件是startIndex &lt;= endIndex, 也就是2个指针汇聚，则终止遍历<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://camo.githubusercontent.com/b4fb1b2548533ffba8906ef693badc897821d8c223722d8e281c5d4c84489489/68747470733a2f2f696d6167652d7374617469632e7365676d656e746661756c742e636f6d2f3132382f3638392f313238363839393539302d353664343162383339633237665f61727469636c6578\"><img src=\"https://camo.githubusercontent.com/b4fb1b2548533ffba8906ef693badc897821d8c223722d8e281c5d4c84489489/68747470733a2f2f696d6167652d7374617469632e7365676d656e746661756c742e636f6d2f3132382f3638392f313238363839393539302d353664343162383339633237665f61727469636c6578\" alt=\"differ\" data-canonical-src=\"https://image-static.segmentfault.com/128/689/1286899590-56d41b839c27f_articlex\" style=\"max-width: 100%;\"></a></li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://zhuanlan.zhihu.com/p/61766666\" rel=\"nofollow\">Reference</a></p>\n<h3 dir=\"auto\">完成一个Dialog组件，说  说你设计的思路</h3>\n<h3 dir=\"auto\">为什么 Vuex 的 mutation中不能做异步操作</h3>\n<p dir=\"auto\"><a href=\"https://vuex.vuejs.org/zh/guide/mutations.html#mutation-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%90%8C%E6%AD%A5%E5%87%BD%E6%95%B0\" rel=\"nofollow\">官方约定</a>action中可以发送异步请求，而mutation不可以。是因为方便开发debug/devtools去检测数据的走向。</p>\n<h3 dir=\"auto\">Object.defineProperty 和 Proxy</h3>\n<ol dir=\"auto\">\n<li>Object.defineProperty</li>\n</ol>\n<ul dir=\"auto\">\n<li>Object.defineProperty对数组无法做到检测</li>\n<li>必须遍历每一个key</li>\n<li>如果object的层级深，需要遍历并对更深层的子对象进行监测</li>\n<li>Vue在监测数组的时候，其实是重写了Array的那些原型方法，达到劫持的目的</li>\n</ul>\n<ol start=\"2\" dir=\"auto\">\n<li>Proxy</li>\n</ol>\n<ul dir=\"auto\">\n<li>针对整个对象的监测，所以不需要遍历</li>\n<li>支持Array的监测</li>\n<li>Proxy也需要遍历子元素进行监测</li>\n</ul>\n<h3 dir=\"auto\">Vue 的父组件和子组件生命周期钩子执行顺序是什么</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"446355519\" data-permission-text=\"Title is private\" data-url=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/128\" data-hovercard-type=\"issue\" data-hovercard-url=\"/Advanced-Frontend/Daily-Interview-Question/issues/128/hovercard\" href=\"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/128\">Advanced-Frontend/Daily-Interview-Question#128</a></p>\n<h3 dir=\"auto\">$nextTick</h3>\n<p dir=\"auto\"><a href=\"https://juejin.im/post/5cd9854b5188252035420a13\" rel=\"nofollow\">https://juejin.im/post/5cd9854b5188252035420a13</a><br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"277107874\" data-permission-text=\"Title is private\" data-url=\"https://github.com/DDFE/DDFE-blog/issues/24\" data-hovercard-type=\"issue\" data-hovercard-url=\"/DDFE/DDFE-blog/issues/24/hovercard\" href=\"https://github.com/DDFE/DDFE-blog/issues/24\">DDFE/DDFE-blog#24</a></p>\n<h2 dir=\"auto\">Webpack</h2>\n<h3 dir=\"auto\"><a href=\"https://segmentfault.com/a/1190000016816813\" rel=\"nofollow\">https://segmentfault.com/a/1190000016816813</a></h3>\n<h3 dir=\"auto\">性能优化方案</h3>\n<ol dir=\"auto\">\n<li>webpack分chunk, 使用splitChunk，将vendor.js和bundle.js分开</li>\n<li>vendor.js可以再根据node_module name再分，利于缓存</li>\n<li>压缩代码</li>\n<li>局部引入代码，例如不完整引入lodash</li>\n<li>静态代码可以通过字蛛进行字体压缩</li>\n</ol>\n<h2 dir=\"auto\">references</h2>\n<ol dir=\"auto\">\n<li><a href=\"https://juejin.im/post/5befeb5051882511a8527dbe\" rel=\"nofollow\">https://juejin.im/post/5befeb5051882511a8527dbe</a></li>\n<li><a href=\"https://juejin.im/post/5bf8fe2ee51d452d705fee3d\" rel=\"nofollow\">https://juejin.im/post/5bf8fe2ee51d452d705fee3d</a></li>\n<li><a href=\"https://juejin.im/post/5ab0da85f265da23866fb9b7\" rel=\"nofollow\">https://juejin.im/post/5ab0da85f265da23866fb9b7</a></li>\n<li><a href=\"https://muyiy.vip/question/\" rel=\"nofollow\">https://muyiy.vip/question/</a></li>\n<li><a href=\"https://juejin.im/post/5d23e750f265da1b855c7bbe\" rel=\"nofollow\">https://juejin.im/post/5d23e750f265da1b855c7bbe</a></li>\n</ol>\n<h2 dir=\"auto\">Questions:</h2>\n<p dir=\"auto\">1.改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (var i = 0; i&lt; 10; i++){\n  setTimeout(() =&gt; {\n    console.log(i);\n    }, 1000)\n}\"><pre><span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>下面代码输出什么</li>\n</ol>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var a = 10;\n(function () {\n  console.log(a)\n  a = 5\n  console.log(window.a)\n  var a = 20;\n  console.log(a)\n})()\"><pre><span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">10</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">5</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">window</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">a</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">20</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>"},"__N_SSG":true}