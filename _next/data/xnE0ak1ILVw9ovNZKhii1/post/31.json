{"pageProps":{"html":"<h1 dir=\"auto\">2021 年年终总结</h1>\n<p dir=\"auto\">分为技术与生活两部分，写给自己看，后面喷自己用</p>\n<h2 dir=\"auto\">技术</h2>\n<p dir=\"auto\">先总结一下，再细说。</p>\n<ul dir=\"auto\">\n<li>Typescript 已经算是比较熟练的层面了。</li>\n<li>深入了解与使用了 Vite。产出了文档方案 docit</li>\n<li>React hooks 的第 N 次重新理解，也重新阅读了 N 次官方文档。</li>\n<li>参加了 Vue Conf，远观了几位社区活跃人士</li>\n<li>整体系统架构设计能力提升</li>\n<li>公司里帮团队做 KPI 产物</li>\n</ul>\n<h3 dir=\"auto\">TypeScript</h3>\n<p dir=\"auto\">今年基本项目都开始迁移 TypeScript 了，相比以往的 TypeScript 体验，这次还是蛮顺畅的。从复杂的 typing 定义，到重载，类型守卫，已经比较得心应手了。</p>\n<p dir=\"auto\">对于 TypeScript 自己还是一如既往的觉得，迁移需谨慎。</p>\n<p dir=\"auto\">面对频繁的业务迭代速度，TypeScript 对于快速”糊“一个上去的诉求明显不够灵活，且对团队水平要求更高。见证过 AnyScript 真不稀奇，DictionaryScript 才真是血压飙升</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"interface Dictionary {\n  [key: string]: any;\n}\"><pre><span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Dictionary</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span>: <span class=\"pl-smi\">string</span><span class=\"pl-kos\">]</span>: <span class=\"pl-smi\">any</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">若在团队内推广 TypeScript，一定要确保自身对 TypeScript 的了解足够深入，能够进行一定规模的培训，对于很多难写的 case（React, Event, Forward Ref, Hoc 等）能够给予团队快速且正确的解答。</p>\n<h3 dir=\"auto\">Vite</h3>\n<p dir=\"auto\">Vite 也是今年大热门了，开发体验确实是从未体验过的爽快，虽然目前公司内还未正式使用过，但是私下里已经基于 Vite 开发过 2 个项目了。<br>\n公司内未正式使用主要还是研发平台中部分链路对于 site 应用的把控，希望明年能自己尝试突破一下。</p>\n<p dir=\"auto\">再说一个自己在做的玩具 Docit</p>\n<p dir=\"auto\">Docit 是一个快捷文档编写解决方案，目标在于简单快捷，能够快速构建文档。<br>\n基于 Mdx + Vite，支持基于 TypeScript 的快速类型表格生成。</p>\n<p dir=\"auto\">后续会支持 SSR 等更多功能，目标是好用，可用，快速。对标 Storybook 甚至 VuePress</p>\n<h3 dir=\"auto\">Unified</h3>\n<p dir=\"auto\">没太多可说，从Mdx开始到整个unified生态学习。</p>\n<h3 dir=\"auto\">React</h3>\n<p dir=\"auto\">以目前的技术水平以及我的描述能力其实不是很好表达我对 React 的看法，但是我还是大概说说</p>\n<p dir=\"auto\">先提一些疑问吧，</p>\n<ol dir=\"auto\">\n<li>从一个页面的渲染角度出发，父组件 render 了，我子组件为何要 rerender，从单纯的组件出发，我依赖我的入参，我依赖我自身的状态，仅这 2 点变更时我进行 rerender 足矣，为何放在父组件里就必须要遵循父组件 render，我必须 rerender 的说法？</li>\n<li>useEffect 作为一种新的编排副作用的方式真的挺好的，eslint 针对 deps 的提示也挺好的，但是部分需求确实要强行关掉提示。当然可以用 useRef，缓存手段让 useEffect 不对缺少的 deps 报警，但是总觉得不是一个理想的方式。别的 hooks 同理。</li>\n<li>一个组件是否要用 React.memo 包装，这个问题其实跟问题 1 挺像的，在我看来，一个组件就必须要用 memo 包上（当然我从来不这么写），我不认为目前父子组件的 render 问题是一个好的现象。</li>\n</ol>\n<p dir=\"auto\">我觉得其实去细扣这些细节对于我个人而言没有什么太大的意义。因为从性能角度，逻辑编排角度，状态唯一性等设计问题我觉得我已经做的还可以了，有进步空间，但是也不知去哪儿进步。我明年核心应该是关注于技术多元化，而不是对 React 扣字眼。</p>\n<p dir=\"auto\">说到细节，Redux 是一个典型的 FLUX 架构实现，思路很美好，写起来是真的吃屎。跟 React 核心思路一样，状态是状态，不跟 render 强绑定的不是状态，不应该作为 dep 的不要作为 dep，保证逻辑唯一性，等等等等。用一些很 hack 的方式去保证这些美好的思路，但是不考虑代码可读性真的好吗？</p>\n<p dir=\"auto\">再说说状态管理，Redux 之后紧跟着各种”Wrapper“就来了，例如 rematch, ice store 等状态管理，要么是减少 boilerplate 代码，要么是用 immerjs 做一些黑魔法。要么就是拥抱 hooks 的状态管理，可 hooks 紧锁 React 生态，有些状态管理 lib 甚至脱离 React 无法使用，这些是否真的是一个好的前端应用状态管理呢？</p>\n<h3 dir=\"auto\">DSL</h3>\n<p dir=\"auto\">其实写到这里，我已经有点费解了。对”大厂“的费解其实是更多，我就不提 Weex 到底发生啥了，去年下半年听说了 Rax 这么个玩意。<br>\n我能体会到现在国内各种内卷的状态，各类业务对于前端的高速迭代诉求，uniapp，rax，remax, weex 等应运而生。</p>\n<p dir=\"auto\">前公司是国外一小企业，有 Android 和 Ios 的开发诉求，同时也有 web 端的诉求，在我看来一行人干一行事儿，前公司是专门安排了 3 个团队对应 3 个端的，我觉得这种是真的很好，对于工种分配的很合理。</p>\n<p dir=\"auto\">先说说 Rax，目前我司主技术栈是 react，那你现在要搞 Rax，之前构建的 React 怎么办？社区生态不要了？那 Rax 哪有社区生态呢。<br>\nRax 估计也就跟 Weex 差不多了。</p>\n<p dir=\"auto\">《部分内容已删减：巨人之前也没法站在巨人肩膀上看世界》</p>\n<blockquote>\n<p dir=\"auto\">行了，今年的年终总结最终还是把自己写成了个喷子模样</p>\n</blockquote>\n<h3 dir=\"auto\">生活</h3>\n<h4 dir=\"auto\">衣</h4>\n<p dir=\"auto\">今年就买了一件衣服，我觉得我碉堡了</p>\n<h4 dir=\"auto\">食</h4>\n<p dir=\"auto\">推荐 2 家店：</p>\n<ul dir=\"auto\">\n<li>南渠街铁板烧</li>\n<li>江南虾客</li>\n</ul>\n<p dir=\"auto\">都在老余杭，有点远，但是是真的很顶</p>\n<h4 dir=\"auto\">住</h4>\n<p dir=\"auto\">我也租了个新的地儿，碰到了个很垃圾的房东，住址在老婆跟我公司的交叉口，我打车上班，她坐公交上班（还是我会花钱）</p>\n<p dir=\"auto\">一开始闹蟑螂，用胶饵除了 3 次，算是能够勉强解决蟑螂问题，至少没有大晚上再听到我老婆的惊叫声了。</p>\n<p dir=\"auto\">电热水器坏了 2 回。</p>\n<p dir=\"auto\">总之是个很差的住房体验了。22 年 3 月又要换房了。希望能有个好住处。</p>\n<h4 dir=\"auto\">行</h4>\n<p dir=\"auto\">买了人生第一辆车。（前一辆是大学期间买的老二手马六）。</p>\n<p dir=\"auto\">2020 年的年终奖到手后，跟老婆商讨一番后，直接买了 A3，顶配买不到，买了中配，又加了 N 多顶配，几乎与顶配齐了。眼也没眨的交了钱，眼也没眨的交了 1000 块办了牌。<br>\n这 1000 块我老婆觉得很冤枉，虽然我穷的一批，但是我一直觉得我很富有（兜里只有 200-2000 块是家常便饭了）</p>\n<p dir=\"auto\">车子还是挺不错的，突然回个家，去个上海啊，旅个游啊很方便。很后悔没早点买车，其实还是穷。</p>\n<p dir=\"auto\">已经 2 年没出去玩了，主要还是因为穷，自己没啥问题，牺牲了夫人的生活确实不合适。</p>\n<h2 dir=\"auto\">总结</h2>\n<p dir=\"auto\">回顾去年：</p>\n<ul dir=\"auto\">\n<li>明显戾气重了很多，就是那种感觉自己技术贼牛逼的傻逼气息，希望新的一年能够收敛。</li>\n<li>技术上感觉上涨 20%？缺点在于，技术的那种酸臭味很重</li>\n</ul>\n<p dir=\"auto\">期望新的一年：</p>\n<ul dir=\"auto\">\n<li>多照顾夫人感受</li>\n<li>出去旅游</li>\n<li>住的好一点</li>\n<li>多看看父母</li>\n<li>要开始考虑技术多元化，不能成为一个码代码机器</li>\n<li>为公司考虑多一些些，为自己考虑更多一点</li>\n<li>多读书，多写文章，多锻炼锻炼文笔</li>\n</ul>\n<p dir=\"auto\">学习列表：</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Svelte &amp; Web Components及其生态</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Canvas</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Vite &amp; Rollup &amp; Esbuild</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Workers &amp; Google Workbox &amp; PWA</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Performance Tuning</li>\n</ul>"},"__N_SSG":true}