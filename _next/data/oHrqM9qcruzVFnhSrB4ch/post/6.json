{"pageProps":{"html":"<h1 dir=\"auto\">一些手写代码的代码集合</h1>\n<h2 dir=\"auto\">Array.prototype.filter</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function filter (source, method) {\n  let result = []\n\n  source.forEach((curr, index, src) =&gt; {\n    if (method(curr, index, src)) {\n      result.push(curr)\n    }\n  })\n\n  return result\n}\n\nlet arr = [{ name: 'hao'}, {name: 'peng'}, { name: 'derek' }]\n\nlet result = filter(arr, item =&gt; item.name === 'derek')\n\nconsole.log(result)\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">filter</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">source</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n\n  <span class=\"pl-s1\">source</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">curr</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'hao'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'peng'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">'derek'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">item</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">item</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'derek'</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">Array.prototype.reduce</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function reduce (source, method, acc) {\n  if (acc === undefined) {\n    throw new Error ('accumlator is undefined')\n  }\n\n  let copy = acc\n\n  source.forEach((curr, index, src) =&gt; {\n    copy = method(copy, curr, index, src)\n  })\n\n  return copy\n}\n\nlet arr = [1, 2, 3]\n\nlet result = reduce(arr, (acc, curr, index, src) =&gt; {\n  console.log(acc, curr, index, src)\n  return acc+= curr\n}, 0)\n\nconsole.log(result)\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">reduce</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">source</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">method</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">acc</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Error</span> <span class=\"pl-kos\">(</span><span class=\"pl-s\">'accumlator is undefined'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">copy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">acc</span>\n\n  <span class=\"pl-s1\">source</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">copy</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">method</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">copy</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">copy</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">reduce</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">acc</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">curr</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">src</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">acc</span><span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">curr</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">Function.prototype.bind</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function bind (method, ctx) {\n  let parameters = [...arguments]\n  parameters.shift()\n  parameters.shift()\n  return method.apply(ctx, parameters)\n}\n\nfunction test () {\n  var module = {\n    x: 'old',\n    getX: function(text1, text2) {\n      console.log(text1, text2, this.x)\n      return this.x;\n    }\n  }\n\n  var newOne = {\n    x: 'new'\n  }\n\n  console.log(module.getX('1', '2'))\n  console.log(module.getX.bind(newOne, '3', '4')())\n  console.log('---------------------------')\n  console.log(bind(module.getX, newOne, '3', '4'))\n}\n\ntest()\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">bind</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">parameters</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-s1\">parameters</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-s1\">parameters</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">shift</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">method</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ctx</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">parameters</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">module</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">x</span>: <span class=\"pl-s\">'old'</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-en\">getX</span>: <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text2</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">text1</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">text2</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">newOne</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">x</span>: <span class=\"pl-s\">'new'</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getX</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'1'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'2'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">getX</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newOne</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'3'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'4'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'---------------------------'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">getX</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">newOne</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'3'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'4'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">debounce</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function debounce (fn, delay) {\n  let timer = null\n  return function () {\n    if (timer) {\n      console.log('cancel timer')\n      clearTimeout(timer)\n    }\n    timer = setTimeout(() =&gt; {\n      fn.apply(this, arguments)\n    }, delay)\n  }\n}\n\nconst target = function () {\n  console.log(5)\n}\nconst result = debounce(target, 3000)\n\nresult()\nresult()\nresult()\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">debounce</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">timer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">null</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">timer</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'cancel timer'</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-en\">clearTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">timer</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">timer</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">target</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">debounce</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">target</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3000</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">throttle</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function throttle (fn, delay) {\n  let canRun = true\n  return function () {\n    if (!canRun) {\n      return \n    }\n    canRun = false\n    fn.apply(this, arguments)\n    setTimeout(() =&gt; {\n      canRun = true\n    }, delay)\n  }\n}\n\nconst target = function () {\n  console.log(5)\n}\nconst result = throttle(target, 3000)\n\nresult()\nresult()\nresult()\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">throttle</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">canRun</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> \n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span>\n    <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">canRun</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">delay</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">target</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">throttle</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">target</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3000</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">result</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">inheritance</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function Person (name, age) {\n  this.name = name\n  this.age = age\n}\n\nPerson.prototype.say = function () {\n  console.log(`I'm Person, my name is ${this.name}, my age is ${this.age}`)\n}\nPerson.prototype.yell = function () {\n  console.log(`yell`)\n}\n\nfunction Student (name, age, score) {\n  Person.apply(this, arguments)\n  this.score = score\n}\n\n// 原型继承\nStudent.prototype = new Person()\n// 修改继承来的原型上的constructor为目标Student的constructor\nStudent.prototype.constructor = Student\n\nStudent.prototype.say = function () {\n  console.log(`I'm Student, my name is ${this.name}, my age is ${this.age}, my score is ${this.score}`)\n}\nStudent.prototype.studentYell = function () {\n  console.log(`student yell`)\n}\n\nvar p = new Person('a person', '22')\nvar derek = new Student('derek', '21', '321')\nderek.say()\nderek.yell()\nderek.studentYell()\nconsole.log(derek instanceof Person)\nconsole.log(derek instanceof Student)\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">Person</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">name</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">age</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`I'm Person, my name is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>, my age is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">yell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`yell`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">Student</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">name</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">age</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">score</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-v\">Person</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">arguments</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">score</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 原型继承</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-c\">// 修改继承来的原型上的constructor为目标Student的constructor</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">constructor</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Student</span>\n\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`I'm Student, my name is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span></span>, my age is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">age</span><span class=\"pl-kos\">}</span></span>, my score is <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">score</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-v\">Student</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">studentYell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`student yell`</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">p</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'a person'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'22'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">derek</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'derek'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'21'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'321'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">say</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">yell</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-s1\">derek</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">studentYell</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">derek</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Person</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">derek</span> <span class=\"pl-k\">instanceof</span> <span class=\"pl-v\">Student</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">Promise</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const STATUS = {\n  PENDING: 'PENDING',\n  RESOLVED: 'RESOLVED',\n  REJECTED: 'REJECTED'\n}\n\nfunction isCallable (value) {\n  return value &amp;&amp; typeof value === 'function' \n}\n\nfunction MyPromise (executor) {\n  this.status = STATUS.PENDING\n  this.value = undefined\n  this.reason = undefined\n\n  this.onResolvedTaskQueue = []\n  this.onRejectedTaskQueue = []\n\n  const resolver = (value) =&gt; {\n    if (this.status === STATUS.PENDING) {\n      this.onResolvedTaskQueue.forEach((task) =&gt; {\n        if (isCallable(task)) {\n          task(value)\n        }\n      })\n      this.status = STATUS.RESOLVED\n      this.value = value\n      this.reason = undefined\n    }\n  }\n\n  const rejector = (reason) =&gt; {\n    if (this.status === STATUS.PENDING) {\n      this.onRejectedTaskQueue.forEach((task) =&gt; {\n        if (isCallable(task)) {\n          task(reason)\n        }\n      })\n      this.status = STATUS.REJECTED\n      this.value = undefined\n      this.reason = reason\n    }\n  }\n\n  try {\n    executor(resolver, rejector)\n  }\n  catch (err) {\n    // this.status === STATUS.REJECTED\n    // this.reason = err\n  }\n}\n\nMyPromise.prototype.then = function (method) {\n  if (this.status === STATUS.PENDING) {\n    this.onResolvedTaskQueue.push(method)\n  } else {\n    if (this.status === STATUS.RESOLVED &amp;&amp; isCallable(method)) {\n      method(this.value)\n    }\n    // return MyPromise.resolve(returnValue)\n  }\n}\n\nMyPromise.prototype.catch = function (method) {\n  if (this.status === STATUS.PENDING) {\n    this.onRejectedTaskQueue.push(method)\n  } else {\n    if (this.status === STATUS.REJECTED &amp;&amp; isCallable(method)) {\n      method(this.reason)\n    }\n  }\n}\n\nMyPromise.resolve = function (value) {\n  return new MyPromise((resolve, reject) =&gt; {\n    resolve(value)\n  })\n}\n\nMyPromise.reject = function (reason) {\n  return new MyPromise((resolve, reject) =&gt; {\n    reject(reason)\n  })\n}\n\nfunction case1 () {\n  new MyPromise((resolve, reject) =&gt; {\n    console.log(1)\n    setTimeout(() =&gt; {\n      resolve(2)\n    }, 1000)\n  }).then((res) =&gt; {\n    console.log(res)\n    return 3\n  })\n}\ncase1()\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">STATUS</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">PENDING</span>: <span class=\"pl-s\">'PENDING'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">RESOLVED</span>: <span class=\"pl-s\">'RESOLVED'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">REJECTED</span>: <span class=\"pl-s\">'REJECTED'</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">isCallable</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span> \n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-v\">MyPromise</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">executor</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PENDING</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">undefined</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">reason</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">undefined</span>\n\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onResolvedTaskQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onRejectedTaskQueue</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">resolver</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PENDING</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onResolvedTaskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isCallable</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s1\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">RESOLVED</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">value</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">reason</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">undefined</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">rejector</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">reason</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PENDING</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onRejectedTaskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-en\">isCallable</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">task</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s1\">task</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">reason</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">REJECTED</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">undefined</span>\n      <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">reason</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">reason</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">executor</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">resolver</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">rejector</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">err</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// this.status === STATUS.REJECTED</span>\n    <span class=\"pl-c\">// this.reason = err</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PENDING</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onResolvedTaskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">RESOLVED</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">isCallable</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">method</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// return MyPromise.resolve(returnValue)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">catch</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">PENDING</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">onRejectedTaskQueue</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">status</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">STATUS</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">REJECTED</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">isCallable</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">method</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">method</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">reason</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">reject</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">reason</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">reason</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">case1</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">new</span> <span class=\"pl-v\">MyPromise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1000</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">then</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">3</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-en\">case1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">Event Emitter</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function EventEmitter () {\n  this._events = {}\n}\n\nEventEmitter.prototype.$on = function (eventName, handler) {\n  this._events[eventName] = handler\n}\n\nEventEmitter.prototype.$emit = function (eventName, ...args) {\n  if (eventName in this._events) {\n    const handler = this._events[eventName]\n    if (handler &amp;&amp; typeof handler === 'function') {\n      handler.apply(this, args)\n    }\n  }\n}\n\nconst instance = new EventEmitter()\n\nfunction test () {\n  this.name = 'abc'\n\n  instance.$on('test', () =&gt; {\n    console.log(this.name)\n  })\n\n  instance.$emit('test')\n}\n\nperson()\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-v\">EventEmitter</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_events</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">EventEmitter</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">$on</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">eventName</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">handler</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_events</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">eventName</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">handler</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-v\">EventEmitter</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">$emit</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">eventName</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">eventName</span> <span class=\"pl-k\">in</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_events</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">handler</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">_events</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">eventName</span><span class=\"pl-kos\">]</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">handler</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">handler</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">handler</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">instance</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">EventEmitter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'abc'</span>\n\n  <span class=\"pl-s1\">instance</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">$on</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'test'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-s1\">instance</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">$emit</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'test'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">person</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">curry化的plus函数</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function plus (num) {\n  let base = num || 0\n  return function (num2) {\n      let temp = num2 || 0\n      base += temp\n      if (num2 === undefined) {\n          return base\n      }\n      return plus(base)\n  }\n}\n\nfunction test () {\n  const result = plus(1)(2)(3)()\n  \n  console.log(result)\n}\n\ntest()\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">plus</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">num</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">base</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">num</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">0</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">num2</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">let</span> <span class=\"pl-s1\">temp</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">num2</span> <span class=\"pl-c1\">||</span> <span class=\"pl-c1\">0</span>\n      <span class=\"pl-s1\">base</span> <span class=\"pl-c1\">+=</span> <span class=\"pl-s1\">temp</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">num2</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-k\">return</span> <span class=\"pl-s1\">base</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-en\">plus</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">base</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">test</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">plus</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n  \n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">fibonacci</h2>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"function fibonacci (n) {\n  if (n === 1 || n === 2) {\n    return 1\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  }\n}\n\nfunction fibonacci2 (n) {\n  let arr = [1, 1]\n\n  for (var i = 2; i &lt; n; i++) {\n    arr.push(arr[i - 2] + arr[i - 1])\n  }\n  return arr[n - 1]\n}\n\nconsole.log(fibonacci(5))\nconsole.log(fibonacci2(5))\"><pre><span class=\"pl-k\">function</span> <span class=\"pl-en\">fibonacci</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">1</span> <span class=\"pl-c1\">||</span> <span class=\"pl-s1\">n</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">1</span>\n  <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">fibonacci</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">+</span> <span class=\"pl-en\">fibonacci</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">function</span> <span class=\"pl-en\">fibonacci2</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">n</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span>\n\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-s1\">n</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">n</span> <span class=\"pl-c1\">-</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fibonacci</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">fibonacci2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span></pre></div>"},"__N_SSG":true}