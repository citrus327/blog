{"pageProps":{"html":"<h1 dir=\"auto\">Object.defineProperty的一点想法和解读</h1>\n<blockquote>\n<p dir=\"auto\">之前只能兼容IE8，现在可以兼容到IE11了，可以在日常中使用Object.defineProperty了<br>\n看到有人用Object.defineProperty去实现了常量定义，觉得很有意思，在这分享一下。</p>\n</blockquote>\n<p dir=\"auto\"><code class=\"notranslate\">Object.defineProperty</code>是可以对对象本身进行设置的方法。除了常见的对对象进行数据劫持的用法之外，<br>\n最基本的四个属性是可以做到保证属性不被任何改动影响的。</p>\n<p dir=\"auto\">创建一个空的对象。为了保证这个常量对象的纯粹，我们让这个对象的原型为null</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let constant = Object.create(null)\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> <span class=\"pl-s1\">constant</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">create</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">为了保证这个常量下的任意Key-value值，在定义完之后，不可变动，我们可以采用Object.defineProperty对其赋值。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Object.defineProperty(constant, &quot;MY_CONSTANT&quot;, {\n  enumerable: true, // 可以被枚举\n  configurable: false, // 不可以删除和设置该属性\n  writable: false, // 不可以重写\n  value: &quot;MY_CONSTANT_VALUE&quot;\n})\"><pre class=\"notranslate\"><span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">defineProperty</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">constant</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">\"MY_CONSTANT\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">enumerable</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// 可以被枚举</span>\n  <span class=\"pl-c1\">configurable</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// 不可以删除和设置该属性</span>\n  <span class=\"pl-c1\">writable</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// 不可以重写</span>\n  <span class=\"pl-c1\">value</span>: <span class=\"pl-s\">\"MY_CONSTANT_VALUE\"</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">这里有4个值，</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">enumerable</code>: 是否可以被<code class=\"notranslate\">for...in</code>和<code class=\"notranslate\">Object.keys()</code>枚举。</li>\n<li><code class=\"notranslate\">configurable</code>: 是否可以删除该key值，同时控制 \"能否再次对该key值进行<code class=\"notranslate\">Object.defineProperty</code>\"的能力。</li>\n<li><code class=\"notranslate\">writable</code>: 是否可以对该key值对应的value值重新赋值。</li>\n<li><code class=\"notranslate\">value</code>: value值本身</li>\n</ol>\n<p dir=\"auto\">关于enumerbale, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\" rel=\"nofollow\">MDN</a>上有很大篇幅的描述：</p>\n<p dir=\"auto\">所以在对对象constant下的MY_CONSTANT这个属性进行Object.defineProperty之后，任何操作都无法更改该key-value值，启到常量的作用。</p>\n<p dir=\"auto\">这对于一般常量使用来说，可能是一种overkill，但是设计思路值得一看。</p>"},"__N_SSG":true}