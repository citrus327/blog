{"pageProps":{"html":"<h2 dir=\"auto\">变量</h2>\n<ul dir=\"auto\">\n<li>只用Let申明的变量不可修改，添加mut变成可修改的变量，使用mut关键字代表在未来某个时刻变量会被变更。</li>\n<li>const申明的变量不可变，代表此变量永远不可能变更。</li>\n<li>shadowing 可以重复申明变量</li>\n</ul>\n<h2 dir=\"auto\">Data Types</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">let guess: u32 = \"42\".parse().expect(\"Not a number!\");\t</code></p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">:u32</code>为类型标注，type anotation。Rust作为静态强类型语言，某些api需要主动标注来进行类型判断。所以如果不写，compile时会报错</p>\n</li>\n<li>\n<blockquote>\n<p dir=\"auto\">Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters</p>\n</blockquote>\n</li>\n</ul>\n<h2 dir=\"auto\">Flow Control</h2>\n<h3 dir=\"auto\">if</h3>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">跟其他语言一样的if else逻辑控制</p>\n</li>\n<li>\n<p dir=\"auto\">if后的判断 expression可以不带括号，且不会像javascript一样自动转成bool</p>\n</li>\n<li>\n<p dir=\"auto\">If被视为一整个expression，所以可以用类似于三元表达式的形式去表达</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"let number = if condition { 5 } else { 6 };\n\nlet x = \nif 5 &gt; 3 { \n\t3\n} else { \n\t6\n};\nprintln!(&quot;The value of x is: {}&quot;, x);\"><pre><span class=\"pl-k\">let</span> number <span class=\"pl-k\">=</span> <span class=\"pl-k\">if</span> condition { <span class=\"pl-c1\">5</span> } <span class=\"pl-k\">else</span> { <span class=\"pl-c1\">6</span> };\n\n<span class=\"pl-k\">let</span> x <span class=\"pl-k\">=</span> \n<span class=\"pl-k\">if</span> <span class=\"pl-c1\">5</span> <span class=\"pl-k\">&gt;</span> <span class=\"pl-c1\">3</span> { \n\t<span class=\"pl-c1\">3</span>\n} <span class=\"pl-k\">else</span> { \n\t<span class=\"pl-c1\">6</span>\n};\n<span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"The value of x is: {}\"</span>, x);</pre></div>\n<p dir=\"auto\">第一种写法更直接且更贴近熟悉的三元表达式。</p>\n</li>\n</ul>\n<h3 dir=\"auto\">loop</h3>\n<blockquote>\n<p dir=\"auto\">The <code class=\"notranslate\">loop</code> keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.</p>\n</blockquote>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"fn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(&quot;The result is {}&quot;, result);\n}\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {\n    <span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> counter <span class=\"pl-k\">=</span> <span class=\"pl-c1\">0</span>;\n\n    <span class=\"pl-k\">let</span> result <span class=\"pl-k\">=</span> <span class=\"pl-k\">loop</span> {\n        counter <span class=\"pl-k\">+=</span> <span class=\"pl-c1\">1</span>;\n\n        <span class=\"pl-k\">if</span> counter <span class=\"pl-k\">==</span> <span class=\"pl-c1\">10</span> {\n            <span class=\"pl-k\">break</span> counter <span class=\"pl-k\">*</span> <span class=\"pl-c1\">2</span>;\n        }\n    };\n\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"The result is {}\"</span>, result);\n}</pre></div>\n<p dir=\"auto\">可以从loop中使用break打断Loop，并将break的值返回给counter</p>\n<h3 dir=\"auto\">while</h3>\n<blockquote>\n<p dir=\"auto\">When the condition ceases to be true, the program calls <code class=\"notranslate\">break</code>, stopping the loop. This loop type could be implemented using a combination of <code class=\"notranslate\">loop</code>, <code class=\"notranslate\">if</code>, <code class=\"notranslate\">else</code>, and <code class=\"notranslate\">break</code>;</p>\n</blockquote>\n<p dir=\"auto\">跟一般的while没啥区别</p>\n<h3 dir=\"auto\">for</h3>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"fn main() {\n    let range = 1..4; // generate a range\n    let range = range.rev(); // reverse the range\n    for number in range { // count from 3 to 1\n        println!(&quot;{}!&quot;, number);\n    }\n    println!(&quot;LIFTOFF!!!&quot;);\n   // 3\n   // 2\n   // 1\n}\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {\n    <span class=\"pl-k\">let</span> range <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1</span>..<span class=\"pl-c1\">4</span>; <span class=\"pl-c\">// generate a range</span>\n    <span class=\"pl-k\">let</span> range <span class=\"pl-k\">=</span> range.<span class=\"pl-en\">rev</span>(); <span class=\"pl-c\">// reverse the range</span>\n    <span class=\"pl-k\">for</span> number <span class=\"pl-k\">in</span> range { <span class=\"pl-c\">// count from 3 to 1</span>\n        <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"{}!\"</span>, number);\n    }\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"LIFTOFF!!!\"</span>);\n   <span class=\"pl-c\">// 3</span>\n   <span class=\"pl-c\">// 2</span>\n   <span class=\"pl-c\">// 1</span>\n}</pre></div>\n<p dir=\"auto\">例子中没有提到使用for去完成一些condition判断的流程，而是直说了可以用for循环去遍历一些array或者range。</p>"},"__N_SSG":true}