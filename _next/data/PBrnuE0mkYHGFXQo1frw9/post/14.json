{"pageProps":{"html":"<h1 dir=\"auto\">React学习与探索之路 (三) - Dark Mode with Styled Components</h1>\n<h2 dir=\"auto\">一点想法</h2>\n<p dir=\"auto\">看到 Styled Components 文档里的一些高级特性，其中有一项是ThemeProvider，便萌生出使用他完成类似之前IOS上Night Shift的功能，也就是Dark Mode.</p>\n<h2 dir=\"auto\">实现</h2>\n<h3 dir=\"auto\">放置ThemeProvider</h3>\n<p dir=\"auto\">Dark Mode影响的范围应该涉及 Login 页面以及 Dashboard. 所以ThemeProvider应该在这2个组件之上。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;ThemeProvider theme={this.state.theme}&gt;\n  {\n    isAuthenticated ? &lt;Login/&gt; : &lt;Dashboard/&gt;\n  }\n&lt;/ThemeProvider&gt;\"><pre><span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">ThemeProvider</span> <span class=\"pl-c1\">theme</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">state</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">isAuthenticated</span> ? <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Login</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span> : <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Dashboard</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">ThemeProvider</span><span class=\"pl-c1\">&gt;</span></pre></div>\n<p dir=\"auto\">theme对象目前会有一个dark的Boolean属性对Dark Mode进行控制，UI层面上会提供一个Switch来进行模式的切换</p>\n<h3 dir=\"auto\">Dark Mode的状态管理</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"this.state.theme = {\n  dark: false\n}\n\n// 定义handleDarkModeChange函数\nhandleDarkModeChange () {\n  this.setState((prev) =&gt; {\n    return {\n      theme: {\n        dark: !prev.theme.dark\n      }\n    }\n  })\n}\n\nrender () {\n  return (\n    // 传入子组件\n    &lt;ThemeProvider theme={this.state.theme}&gt;\n      {\n        isAuthenticated ? \n          &lt;Login handleDarkModeChange={this.handleDarkModeChange}/&gt; : \n          &lt;Dashboard handleDarkModeChange={this.handleDarkModeChange}/&gt;\n      }\n    &lt;/ThemeProvider&gt;\n  )\n}\"><pre><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">state</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">dark</span>: <span class=\"pl-c1\">false</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// 定义handleDarkModeChange函数</span>\n<span class=\"pl-en\">handleDarkModeChange</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">setState</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">prev</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">theme</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">dark</span>: <span class=\"pl-c1\">!</span><span class=\"pl-s1\">prev</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">render</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c\">// 传入子组件</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">ThemeProvider</span> <span class=\"pl-c1\">theme</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">state</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">isAuthenticated</span> ? \n          <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Login</span> <span class=\"pl-c1\">handleDarkModeChange</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">handleDarkModeChange</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span> : \n          <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Dashboard</span> <span class=\"pl-c1\">handleDarkModeChange</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">handleDarkModeChange</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">ThemeProvider</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">Dark Mode 的 CSS 实现</h3>\n<p dir=\"auto\">在样式方面，使用Styled Component的传参功能对样式进行修改</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const StyledDashboardRoot = styled(StyledDiv)`\n  color: ${props =&gt; props.theme.dark ? 'white' : 'black'};\n  background-color: ${props =&gt; props.theme.dark ? '#f7f7f7' : '#282c34'};\n  transition: background-color 200ms linear, color 200ms linear;\n  ...略\n\n  .MuiListItemIcon-root {\n    color: ${props =&gt; props.theme.dark ? 'white' : 'black'};\n  }\n\n  .MuiListSubheader-root {\n    color: ${props =&gt; props.theme.dark ? 'white' : 'black'};\n    opacity: 0.8;\n  }\n\n  .MuiDivider-root {\n    background-color: ${props =&gt; props.theme.dark ? '#f7f7f7' : undefined};\n    opacity: ${props =&gt; props.theme.dark ? '0.1' : undefined};\n  }\n\n  .dashboard-main {\n    background-color: ${props =&gt; props.theme.dark ? '#282c34' : '#f7f7f7'};\n    height: 100%;\n    ...略\n  }\n`\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-v\">StyledDashboardRoot</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">styled</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">StyledDiv</span><span class=\"pl-kos\">)</span><span class=\"pl-s\">`</span>\n<span class=\"pl-s\">  color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'white'</span> : <span class=\"pl-s\">'black'</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">  background-color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'#f7f7f7'</span> : <span class=\"pl-s\">'#282c34'</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">  transition: background-color 200ms linear, color 200ms linear;</span>\n<span class=\"pl-s\">  ...略</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  .MuiListItemIcon-root {</span>\n<span class=\"pl-s\">    color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'white'</span> : <span class=\"pl-s\">'black'</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  .MuiListSubheader-root {</span>\n<span class=\"pl-s\">    color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'white'</span> : <span class=\"pl-s\">'black'</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">    opacity: 0.8;</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  .MuiDivider-root {</span>\n<span class=\"pl-s\">    background-color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'#f7f7f7'</span> : <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">    opacity: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'0.1'</span> : <span class=\"pl-c1\">undefined</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">  .dashboard-main {</span>\n<span class=\"pl-s\">    background-color: <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">props</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span> ? <span class=\"pl-s\">'#282c34'</span> : <span class=\"pl-s\">'#f7f7f7'</span><span class=\"pl-kos\">}</span></span>;</span>\n<span class=\"pl-s\">    height: 100%;</span>\n<span class=\"pl-s\">    ...略</span>\n<span class=\"pl-s\">  }</span>\n<span class=\"pl-s\">`</span></pre></div>\n<p dir=\"auto\">大致的实现就是黑暗模式下，背景色为暗色，主色调为亮色。�</p>\n<h3 dir=\"auto\">使用Switch组件控制Dark Mode</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;Switch\n  checked={this.props.theme.dark}\n  onChange={(event) =&gt; this.props.handleDarkModeChange(event.target.value)}\n  color=&quot;default&quot;\n  size=&quot;small&quot;\n/&gt;\"><pre><span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">Switch</span>\n  <span class=\"pl-c1\">checked</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">theme</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">dark</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-c1\">onChange</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">event</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">props</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">handleDarkModeChange</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">event</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">target</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span>\n  <span class=\"pl-c1\">color</span><span class=\"pl-c1\">=</span><span class=\"pl-s\">\"default\"</span>\n  <span class=\"pl-c1\">size</span><span class=\"pl-c1\">=</span><span class=\"pl-s\">\"small\"</span>\n<span class=\"pl-c1\">/</span><span class=\"pl-c1\">&gt;</span></pre></div>\n<p dir=\"auto\">可以看到这里的theme是从this.props里读取的，那也就是theme对象需要注入到组件级别，这里可以使用Styled-Components库提供的withTheme的高阶组件</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"withTheme(Navbar)\"><pre><span class=\"pl-en\">withTheme</span><span class=\"pl-kos\">(</span><span class=\"pl-v\">Navbar</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">以上涉及了Provider的概念，具体Styled Components的传参功能，ThemeProvider和withTheme HOC的运用。</p>"},"__N_SSG":true}