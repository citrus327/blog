{"pageProps":{"html":"<h2 dir=\"auto\">Struct</h2>\n<p dir=\"auto\">声明Struct结构</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"struct User {\n    username: String,\n    email: String,\n    sign_in_count: u64,\n    active: bool,\n}\"><pre><span class=\"pl-k\">struct</span> <span class=\"pl-en\">User</span> {\n    username: <span class=\"pl-k\">String</span>,\n    email: <span class=\"pl-k\">String</span>,\n    sign_in_count: <span class=\"pl-k\">u64</span>,\n    active: <span class=\"pl-k\">bool</span>,\n}</pre></div>\n<p dir=\"auto\">初始化User实例</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" let user1 = User {\n \t email: String::from(&quot;someone@example.com&quot;),\n   username: String::from(&quot;someusername123&quot;),\n   active: true,\n   sign_in_count: 1,\n };\"><pre> <span class=\"pl-k\">let</span> user1 <span class=\"pl-k\">=</span> User {\n \t email: <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">from</span>(<span class=\"pl-s\">\"someone@example.com\"</span>),\n   username: <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">from</span>(<span class=\"pl-s\">\"someusername123\"</span>),\n   active: <span class=\"pl-c1\">true</span>,\n   sign_in_count: <span class=\"pl-c1\">1</span>,\n };</pre></div>\n<p dir=\"auto\">读取与修改User实例或属性</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"let mut u = User {\n  email: String::from(&quot;someone@example.com&quot;),\n  username: String::from(&quot;someusername123&quot;),\n  active: true,\n  sign_in_count: 1,\n};\nu.sign_in_count = 5;\n\nprintln!(&quot;{}&quot;, u.sign_in_count);\"><pre><span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> u <span class=\"pl-k\">=</span> User {\n  email: <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">from</span>(<span class=\"pl-s\">\"someone@example.com\"</span>),\n  username: <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">from</span>(<span class=\"pl-s\">\"someusername123\"</span>),\n  active: <span class=\"pl-c1\">true</span>,\n  sign_in_count: <span class=\"pl-c1\">1</span>,\n};\nu.sign_in_count <span class=\"pl-k\">=</span> <span class=\"pl-c1\">5</span>;\n\n<span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"{}\"</span>, u.sign_in_count);</pre></div>\n<p dir=\"auto\">如果想要修改实例的属性，整个实例必须被标注为mut</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n    fn change_width (&amp;mut self, new_width: u32) {\n        self.width = new_width;\n    }\n    fn create () -&gt; Rectangle {\n        Rectangle {\n            width: 23,\n            height: 32\n        }\n    }\n}\n\nfn main() {\n    let mut rect1 = Rectangle::create();\n    println!(&quot;rect1 is {:#?}&quot;, rect1);\n    println!(&quot;rect1 area is {}&quot;, rect1.area());\n    rect1.change_width(32);\n    println!(&quot;rect1 area after change is {}&quot;, rect1.area());\n}\"><pre>#[derive(Debug)]\n<span class=\"pl-k\">struct</span> <span class=\"pl-en\">Rectangle</span> {\n    width: <span class=\"pl-k\">u32</span>,\n    height: <span class=\"pl-k\">u32</span>,\n}\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-en\">Rectangle</span> {\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">area</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-c1\">self</span>) -&gt; <span class=\"pl-k\">u32</span> {\n        <span class=\"pl-c1\">self</span>.width <span class=\"pl-k\">*</span> <span class=\"pl-c1\">self</span>.height\n    }\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">change_width</span> (<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-c1\">self</span>, new_width: <span class=\"pl-k\">u32</span>) {\n        <span class=\"pl-c1\">self</span>.width <span class=\"pl-k\">=</span> new_width;\n    }\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">create</span> () -&gt; Rectangle {\n        Rectangle {\n            width: <span class=\"pl-c1\">23</span>,\n            height: <span class=\"pl-c1\">32</span>\n        }\n    }\n}\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {\n    <span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> rect1 <span class=\"pl-k\">=</span> Rectangle<span class=\"pl-k\">::</span><span class=\"pl-en\">create</span>();\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"rect1 is {:#?}\"</span>, rect1);\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"rect1 area is {}\"</span>, rect1.<span class=\"pl-en\">area</span>());\n    rect1.<span class=\"pl-en\">change_width</span>(<span class=\"pl-c1\">32</span>);\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"rect1 area after change is {}\"</span>, rect1.<span class=\"pl-en\">area</span>());\n}</pre></div>\n<p dir=\"auto\">为struct添加方法，有提到static fn，例如create。</p>\n<p dir=\"auto\">但是实际调用其实不关心是否为static</p>\n<p dir=\"auto\">&amp;self为关键字代表this</p>"},"__N_SSG":true}