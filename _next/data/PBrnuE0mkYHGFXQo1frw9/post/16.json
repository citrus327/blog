{"pageProps":{"html":"<h1 dir=\"auto\">Rust学习笔记</h1>\n<h2 dir=\"auto\">内容</h2>\n<blockquote>\n<ul dir=\"auto\">\n<li>Install the latest stable version of Rust using <code class=\"notranslate\">rustup</code></li>\n<li>Update to a newer Rust version</li>\n<li>Open locally installed documentation</li>\n<li>Write and run a “Hello, world!” program using <code class=\"notranslate\">rustc</code> directly</li>\n<li>Create and run a new project using the conventions of Cargo</li>\n</ul>\n</blockquote>\n<h2 dir=\"auto\">起步</h2>\n<blockquote>\n<p dir=\"auto\">If you’re more familiar with a dynamic language, such as Ruby, Python, or JavaScript, you might not be used to compiling and running a program as separate steps. Rust is an <em>ahead-of-time compiled</em> language, meaning you can compile a program and give the executable to someone else, and they can run it even without having Rust installed. If you give someone a <em>.rb</em>, <em>.py</em>, or <em>.js</em> file, they need to have a Ruby, Python, or JavaScript implementation installed (respectively). But in those languages, you only need one command to compile and run your program. Everything is a trade-off in language design.</p>\n</blockquote>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"fn main() {\n  println!(&quot;Hello, world!&quot;);\n}\"><pre><span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {\n  <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Hello, world!\"</span>);\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"rustc main.rs\n./rust\"><pre>rustc main.rs\n./rust</pre></div>\n<ul dir=\"auto\">\n<li>Rust必须得用分号分隔行，单行可以不带分号。</li>\n<li>运行使用<code class=\"notranslate\">rustc main.rs</code>，形成binary executable之后，直接使用<code class=\"notranslate\">./main</code>就可以运行</li>\n<li><code class=\"notranslate\">println!</code>后面的感叹号代表运行一个Rust Macro，用于区分function和macro</li>\n</ul>\n<h2 dir=\"auto\">Cargo</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><a href=\"https://doc.rust-lang.org/book/ch01-03-hello-cargo.html\" rel=\"nofollow\">reference</a></p>\n</li>\n<li>\n<p dir=\"auto\">包管理器，类比npm，同时具备<code class=\"notranslate\">cargo new hello_cargo</code>等工程能力</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">cargo new</code>之后会形成Cargo.toml文件，类比package.json</p>\n<blockquote>\n<p dir=\"auto\">This file is in the <a href=\"https://toml.io/\" rel=\"nofollow\"><em>TOML</em></a> (<em>Tom’s Obvious, Minimal Language</em>) format, which is Cargo’s configuration format.</p>\n</blockquote>\n</li>\n<li>\n<p dir=\"auto\">CLI Input</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">cargo new</code>创建仓库</li>\n<li><code class=\"notranslate\">cargo build</code>编译executable, 没有optimization，使用<code class=\"notranslate\">cargo build --release</code>用于生产release</li>\n<li><code class=\"notranslate\">cargo run</code> 直接运行，会编译executable</li>\n<li><code class=\"notranslate\">cargo check</code>检测仓库是否可以被成功编译，且不产生executable, 速度快。</li>\n</ul>\n</li>\n</ul>"},"__N_SSG":true}