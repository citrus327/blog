{"pageProps":{"html":"<h2 dir=\"auto\">Module System</h2>\n<blockquote>\n<p dir=\"auto\">Rust has a number of features that allow you to manage your code’s organization, including which details are exposed, which details are private, and what names are in each scope in your programs. These features, sometimes collectively referred to as the <em>module system</em>, include:</p>\n<ul dir=\"auto\">\n<li><strong>Packages:</strong> A Cargo feature that lets you build, test, and share crates</li>\n<li><strong>Crates:</strong> A tree of modules that produces a library or executable</li>\n<li><strong>Modules</strong> and <strong>use:</strong> Let you control the organization, scope, and privacy of paths</li>\n<li><strong>Paths:</strong> A way of naming an item, such as a struct, function, or module</li>\n</ul>\n</blockquote>\n<h2 dir=\"auto\">Packages and Crates</h2>\n<p dir=\"auto\"><a href=\"https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html\" rel=\"nofollow\">ref</a></p>\n<blockquote>\n<p dir=\"auto\">A package <em>must</em> contain zero or one library crates, and no more.</p>\n</blockquote>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n\"><pre class=\"notranslate\">$ cargo new my-project\n     Created binary (application) <span class=\"pl-s\"><span class=\"pl-pds\">`</span>my-project<span class=\"pl-pds\">`</span></span> package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n</pre></div>\n<blockquote>\n<p dir=\"auto\">When we entered the command, Cargo created a <em>Cargo.toml</em> file, giving us a <strong>package</strong>. Looking at the contents of <em>Cargo.toml</em>, there’s no mention of <em>src/main.rs</em><strong>because Cargo follows a convention that <em>src/main.rs</em> is the crate root of a binary crate with the same name as the package</strong>. Likewise, Cargo knows that if the package directory contains <em>src/lib.rs</em>, the package contains a library crate with the same name as the package, and <em>src/lib.rs</em> is its crate root. Cargo passes the crate root files to <code class=\"notranslate\">rustc</code> to build the library or binary.</p>\n</blockquote>\n<ul dir=\"auto\">\n<li>src/main.rs是约定的binary入口</li>\n<li>src/lib.rs是约定的library入口</li>\n<li><em>src/main.rs</em> and <em>src/lib.rs</em> are called crate roots</li>\n</ul>\n<blockquote>\n<p dir=\"auto\">Here, we have a package that only contains <em>src/main.rs</em>, meaning it only contains a binary crate named <code class=\"notranslate\">my-project</code>. If a package contains <em>src/main.rs</em> and <em>src/lib.rs</em>, it has two crates: <strong>a library and a binary</strong>, both with the same name as the package. A package can have multiple binary crates by placing files in the <em>src/bin</em> directory: each file will be a separate binary crate.</p>\n</blockquote>\n<ul dir=\"auto\">\n<li>crate可以理解是一个项目</li>\n<li>mod就是项目内的模块</li>\n</ul>\n<h2 dir=\"auto\">Modules and Paths</h2>\n<blockquote>\n<p dir=\"auto\">the <code class=\"notranslate\">use</code> keyword that brings a path into scope; and the <code class=\"notranslate\">pub</code> keyword to make items public.</p>\n<p dir=\"auto\"><em>Modules</em> let us organize code within a crate into groups for readability and easy reuse. Modules also control the <em>privacy</em> of items, which is whether an item can be used by outside code (<em>public</em>) or is an internal implementation detail and not available for outside use (<em>private</em>).</p>\n</blockquote>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">cargo new --lib restaurant</code>创建一个lib</li>\n</ul>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">mod</span> front_of_house <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">pub</span> <span class=\"pl-k\">mod</span> hosting <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">eat_at_restaurant</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// Absolute path</span>\n    <span class=\"pl-k\">crate</span><span class=\"pl-kos\">::</span>front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-c\">// Relative path</span>\n    front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">crate</code>代表当前一个绝对路径的开始，代表当前文件？？</p>\n</li>\n<li>\n<p dir=\"auto\">使用pub代表public</p>\n</li>\n<li>\n<p dir=\"auto\">可以使用use来省略很长的路径</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"mod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse front_of_house::hosting; // hosting可以直接在当前scope访问\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n\n    // use Use\n    hosting::add_to_waitlist();\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">mod</span> front_of_house <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">pub</span> <span class=\"pl-k\">mod</span> hosting <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">use</span> front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">;</span> <span class=\"pl-c\">// hosting可以直接在当前scope访问</span>\n\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">eat_at_restaurant</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// Absolute path</span>\n    <span class=\"pl-k\">crate</span><span class=\"pl-kos\">::</span>front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-c\">// Relative path</span>\n    front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    <span class=\"pl-c\">// use Use</span>\n    hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n<li>\n<p dir=\"auto\">可以使用as来解决重复命名问题</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"use std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -&gt; Result {\n    // --snip--\n}\n\nfn function2() -&gt; IoResult&lt;()&gt; {\n    // --snip--\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">use</span> std<span class=\"pl-kos\">::</span>fmt<span class=\"pl-kos\">::</span><span class=\"pl-v\">Result</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">use</span> std<span class=\"pl-kos\">::</span>io<span class=\"pl-kos\">::</span><span class=\"pl-v\">Result</span> <span class=\"pl-k\">as</span> <span class=\"pl-v\">IoResult</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">function1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">Result</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// --snip--</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">function2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">IoResult</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// --snip--</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</li>\n</ul>\n<h2 dir=\"auto\">分离文件</h2>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"|- src\n  |- front_of_house // 模块文件夹\n    |-hosting.rs    // 模块主体\n  |- test_a_mod     // 模块文件夹\n    |-test_mod.rs   // 模块主体\n\tfront_of_house.rs // front_of_house的定义文件\n\ttest_a_mod.rs     // test_a_mod的定义文件\n\tlib.rs            // 入口文件\"><pre class=\"notranslate\">|- <span class=\"pl-s1\">src</span>\n  |- <span class=\"pl-s1\">front_of_house</span> <span class=\"pl-c\">// 模块文件夹</span>\n    |-<span class=\"pl-s1\">hosting</span>.<span class=\"pl-s1\">rs</span>    <span class=\"pl-c\">// 模块主体</span>\n  |- <span class=\"pl-s1\">test_a_mod</span>     <span class=\"pl-c\">// 模块文件夹</span>\n    |-<span class=\"pl-smi\">test_mod</span>.<span class=\"pl-smi\">rs</span>   <span class=\"pl-c\">// 模块主体</span>\n\t<span class=\"pl-smi\">front_of_house</span>.<span class=\"pl-smi\">rs</span> <span class=\"pl-c\">// front_of_house的定义文件</span>\n\t<span class=\"pl-smi\">test_a_mod</span>.<span class=\"pl-smi\">rs</span>     <span class=\"pl-c\">// test_a_mod的定义文件</span>\n\t<span class=\"pl-smi\">lib</span>.<span class=\"pl-smi\">rs</span>            <span class=\"pl-c\">// 入口文件</span></pre></div>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// lib/src.rs\nmod front_of_house;\nmod test_a_mod;\n\npub use crate::front_of_house::hosting;\npub use crate::test_a_mod::test_mod;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n\n    test_mod::test_fn();\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// lib/src.rs</span>\n<span class=\"pl-k\">mod</span> front_of_house<span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">mod</span> test_a_mod<span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">use</span> <span class=\"pl-k\">crate</span><span class=\"pl-kos\">::</span>front_of_house<span class=\"pl-kos\">::</span>hosting<span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">use</span> <span class=\"pl-k\">crate</span><span class=\"pl-kos\">::</span>test_a_mod<span class=\"pl-kos\">::</span>test_mod<span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">eat_at_restaurant</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    hosting<span class=\"pl-kos\">::</span><span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n    test_mod<span class=\"pl-kos\">::</span><span class=\"pl-en\">test_fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// src/front_of_house/hosting.rs\npub fn add_to_waitlist() {}\"><pre class=\"notranslate\"><span class=\"pl-c\">// src/front_of_house/hosting.rs</span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">add_to_waitlist</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// src/test_a_mod/test_mod.rs\npub fn test_fn() {}\"><pre class=\"notranslate\"><span class=\"pl-c\">// src/test_a_mod/test_mod.rs</span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">test_fn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// src/front_of_house.rs\npub mod hosting;\"><pre class=\"notranslate\"><span class=\"pl-c\">// src/front_of_house.rs</span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">mod</span> hosting<span class=\"pl-kos\">;</span></pre></div>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// src/test_a_mod.rs\npub mod test_mod;\"><pre class=\"notranslate\"><span class=\"pl-c\">// src/test_a_mod.rs</span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">mod</span> test_mod<span class=\"pl-kos\">;</span></pre></div>"},"__N_SSG":true}