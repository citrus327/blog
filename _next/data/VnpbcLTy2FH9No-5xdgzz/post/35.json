{"pageProps":{"html":"<h1 dir=\"auto\">使用 Github Action 自动发布 npm 包</h1>\n<h2 dir=\"auto\">简介</h2>\n<p dir=\"auto\">下午抽空调研了一下如何使用 github action 来自动发布 npm 包。写下本文记录。</p>\n<h2 dir=\"auto\">步骤</h2>\n<ul dir=\"auto\">\n<li>准备 npm token</li>\n<li>设置 github secret</li>\n<li>设置 github actions</li>\n</ul>\n<h2 dir=\"auto\">准备 npm token</h2>\n<ul dir=\"auto\">\n<li>访问<a href=\"https://www.npmjs.com/\" rel=\"nofollow\">https://www.npmjs.com/</a> 并登录。</li>\n<li>进入个人设置 - access tokens。</li>\n<li>选择<code class=\"notranslate\">Generate New Token</code>，输入密码确认。</li>\n<li>给该 token 起个名字(名字不影响，为了方便记忆可以使用<code class=\"notranslate\">npm_publish</code>这种)。并设置 token 类型为<code class=\"notranslate\">Automation</code></li>\n<li>记下该 token。</li>\n</ul>\n<h2 dir=\"auto\">设置 github secret</h2>\n<ul dir=\"auto\">\n<li>进入 github 仓库。</li>\n<li>点击仓库的<code class=\"notranslate\">Settings - Actions</code>，点击右上角的<code class=\"notranslate\">New Repository Secret</code></li>\n<li>输入 Token 名称，例如<code class=\"notranslate\">NPM_PUBLISH_TOKEN</code>, 并填入之前在 npmjs.com 上创建的 npm token</li>\n</ul>\n<h2 dir=\"auto\">设置 github actions</h2>\n<ul dir=\"auto\">\n<li>在仓库内新建<code class=\"notranslate\">.github/workflows/publish.yml</code>文件</li>\n<li>文件内容如下:</li>\n</ul>\n<div class=\"highlight highlight-source-yaml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"name: Publish to NPM\non:\n  # release时触发。\n  release:\n    types: [created]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 16\n      # 因为我的仓库使用的是pnpm，所以需要安装pnpm, 若使用的是npm则可以忽略。\n      - name: Install Pnpm\n        uses: pnpm/action-setup@v2.2.2\n        with:\n          version: 6.0.2\n      # 安装依赖，脚本(run部分)可以自己写\n      - name: Install dependencies\n        run: pnpm install\n      # 可以使用prepublishOnly来做build, 这样build可以在ci环节中剔除。见下文Tips\n      - name: Build\n        run: pnpm run build\n      # 使用JS-DevTools/npm-publish@v1来进行npm发布。\n      - name: Publish package on NPM 📦\n        uses: JS-DevTools/npm-publish@v1\n        with:\n          # token里的secrets.NPM_PUBLISH_TOKEN就是在仓库内设定的token名。\n          token: ${{ secrets.NPM_PUBLISH_TOKEN }}\"><pre class=\"notranslate\"><span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Publish to NPM</span>\n<span class=\"pl-ent\">on</span>:\n  <span class=\"pl-c\"><span class=\"pl-c\">#</span> release时触发。</span>\n  <span class=\"pl-ent\">release</span>:\n    <span class=\"pl-ent\">types</span>: <span class=\"pl-s\">[created]</span>\n<span class=\"pl-ent\">jobs</span>:\n  <span class=\"pl-ent\">build</span>:\n    <span class=\"pl-ent\">runs-on</span>: <span class=\"pl-s\">ubuntu-latest</span>\n    <span class=\"pl-ent\">steps</span>:\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Checkout</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">actions/checkout@v3</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Setup Node</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">actions/setup-node@v3</span>\n        <span class=\"pl-ent\">with</span>:\n          <span class=\"pl-ent\">node-version</span>: <span class=\"pl-c1\">16</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> 因为我的仓库使用的是pnpm，所以需要安装pnpm, 若使用的是npm则可以忽略。</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Install Pnpm</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">pnpm/action-setup@v2.2.2</span>\n        <span class=\"pl-ent\">with</span>:\n          <span class=\"pl-ent\">version</span>: <span class=\"pl-s\">6.0.2</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> 安装依赖，脚本(run部分)可以自己写</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Install dependencies</span>\n        <span class=\"pl-ent\">run</span>: <span class=\"pl-s\">pnpm install</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> 可以使用prepublishOnly来做build, 这样build可以在ci环节中剔除。见下文Tips</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Build</span>\n        <span class=\"pl-ent\">run</span>: <span class=\"pl-s\">pnpm run build</span>\n      <span class=\"pl-c\"><span class=\"pl-c\">#</span> 使用JS-DevTools/npm-publish@v1来进行npm发布。</span>\n      - <span class=\"pl-ent\">name</span>: <span class=\"pl-s\">Publish package on NPM 📦</span>\n        <span class=\"pl-ent\">uses</span>: <span class=\"pl-s\">JS-DevTools/npm-publish@v1</span>\n        <span class=\"pl-ent\">with</span>:\n          <span class=\"pl-c\"><span class=\"pl-c\">#</span> token里的secrets.NPM_PUBLISH_TOKEN就是在仓库内设定的token名。</span>\n          <span class=\"pl-ent\">token</span>: <span class=\"pl-s\">${{ secrets.NPM_PUBLISH_TOKEN }}</span></pre></div>\n<h2 dir=\"auto\">测试使用</h2>\n<p dir=\"auto\">在 github 仓库的<code class=\"notranslate\">Releases</code>页面点击<code class=\"notranslate\">Draft a new release</code><br>\n在一个 release 发布后，会自动触发上文设置的 github action。</p>\n<h2 dir=\"auto\">Tips</h2>\n<ul dir=\"auto\">\n<li>如果在<code class=\"notranslate\">package.json</code>中设置了 <code class=\"notranslate\">prepublishOnly</code>钩子去进行<code class=\"notranslate\">build</code>操作，就无需在 action 中配置<code class=\"notranslate\">npm run build</code>环节了。</li>\n</ul>\n<h2 dir=\"auto\">Examples</h2>\n<p dir=\"auto\">参考：<a href=\"https://github.com/phshy0607/test-ci-auto-publish\">https://github.com/phshy0607/test-ci-auto-publish</a></p>"},"__N_SSG":true}