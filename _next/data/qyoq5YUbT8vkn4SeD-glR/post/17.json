{"pageProps":{"html":"<h2 dir=\"auto\">Guessing Number 程序</h2>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"use std::io;\n\nfn main() {\n    println!(&quot;Guess the number!&quot;);\n\n    println!(&quot;Please input your guess.&quot;);\n\n    // created a mutable variable that is currently bound to a new, empty instance of a String\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(&quot;Failed to read line&quot;);\n\n    println!(&quot;You guessed: {}&quot;, guess);\n}\"><pre><span class=\"pl-k\">use</span> std<span class=\"pl-k\">::</span>io;\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span>() {\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Guess the number!\"</span>);\n\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Please input your guess.\"</span>);\n\n    <span class=\"pl-c\">// created a mutable variable that is currently bound to a new, empty instance of a String</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> guess <span class=\"pl-k\">=</span> <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">new</span>();\n\n    io<span class=\"pl-k\">::</span><span class=\"pl-en\">stdin</span>()\n        .<span class=\"pl-en\">read_line</span>(<span class=\"pl-k\">&amp;</span><span class=\"pl-k\">mut</span> guess)\n        .<span class=\"pl-en\">expect</span>(<span class=\"pl-s\">\"Failed to read line\"</span>);\n\n    <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"You guessed: {}\"</span>, guess);\n}</pre></div>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">Prelude: 翻译为前奏，默认rust会引入一些default包，如果不在默认返回需要显式引入</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">mut </code>：mutable的意思在变量名前加上mut代表这个变量可以被mutate</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">String::new()</code>:可以理解成是call了String的一个static method</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">&amp;</code>: reference</p>\n</li>\n<li>\n<p dir=\"auto\">链式调用建议换行</p>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">read_line</code>返回的是一个<code class=\"notranslate\">io:Result</code>的变量，可以用<code class=\"notranslate\">expect</code>函数来处理异常情况，如果不处理，会给相应的warning让你处理。</p>\n<blockquote>\n<p dir=\"auto\">If this instance of <code class=\"notranslate\">io::Result</code> is an <code class=\"notranslate\">Err</code> value, <code class=\"notranslate\">expect</code> will cause the program to crash and display the message that you passed as an argument to <code class=\"notranslate\">expect</code>. If the <code class=\"notranslate\">read_line</code> method returns an <code class=\"notranslate\">Err</code>, it would likely be the result of an error coming from the underlying operating system. If this instance of <code class=\"notranslate\">io::Result</code> is an <code class=\"notranslate\">Ok</code> value, <code class=\"notranslate\">expect</code> will take the return value that <code class=\"notranslate\">Ok</code> is holding and return just that value to you so you can use it.</p>\n</blockquote>\n</li>\n<li>\n<p dir=\"auto\"><code class=\"notranslate\">println!(\"You guessed: {}\", guess);</code>可以使用<code class=\"notranslate\">{}</code>做为占位符，如果有<code class=\"notranslate\">{}</code>则必传相应参数</p>\n</li>\n</ul>\n<h2 dir=\"auto\">拓展Guessing Number</h2>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\">使用rand crates去生成随机数</p>\n<p dir=\"auto\"><code class=\"notranslate\">let secret_number = rand::thread_rng().gen_range(1, 101);</code></p>\n</li>\n<li>\n<p dir=\"auto\">比较需要将stdin的输入转成int<br>\n<code class=\"notranslate\">let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");</code><br>\n<code class=\"notranslate\">:u32</code>是一种类型的anotation，告知parse函数需要转换成这种格式的数字</p>\n</li>\n<li>\n<p dir=\"auto\">代码里如果有已经定义过的变量，可以重复申明</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"let mut guess = String::new();\n// ...\nlet guess: i32 = guess.trim().parse().expect(&quot;Please type a number!&quot;);\"><pre><span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> guess <span class=\"pl-k\">=</span> <span class=\"pl-k\">String</span><span class=\"pl-k\">::</span><span class=\"pl-en\">new</span>();\n<span class=\"pl-c\">// ...</span>\n<span class=\"pl-k\">let</span> guess: <span class=\"pl-k\">i32</span> <span class=\"pl-k\">=</span> guess.<span class=\"pl-en\">trim</span>().<span class=\"pl-en\">parse</span>().<span class=\"pl-en\">expect</span>(<span class=\"pl-s\">\"Please type a number!\"</span>);</pre></div>\n<blockquote>\n<p dir=\"auto\">This feature is often used in situations in which you want to convert a value from one type to another type</p>\n</blockquote>\n<p dir=\"auto\">这种行为在Rust内称为Shadowing</p>\n</li>\n<li>\n<p dir=\"auto\">使用<code class=\"notranslate\">match</code>进行数值比较</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"match guess.cmp(&amp;secret_number) {\n  Ordering::Less =&gt; println!(&quot;Too small!&quot;),\n  Ordering::Greater =&gt; println!(&quot;Too big!&quot;),\n  Ordering::Equal =&gt; println!(&quot;You win!&quot;),\n}\"><pre><span class=\"pl-k\">match</span> guess.<span class=\"pl-en\">cmp</span>(<span class=\"pl-k\">&amp;</span>secret_number) {\n  Ordering<span class=\"pl-k\">::</span>Less <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Too small!\"</span>),\n  Ordering<span class=\"pl-k\">::</span>Greater <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"Too big!\"</span>),\n  Ordering<span class=\"pl-k\">::</span>Equal <span class=\"pl-k\">=&gt;</span> <span class=\"pl-c1\">println!</span>(<span class=\"pl-s\">\"You win!\"</span>),\n}</pre></div>\n</li>\n<li>\n<p dir=\"auto\">添加循环，让用户持续输入直到win</p>\n</li>\n<li>\n<p dir=\"auto\">容错处理 - 如果输入的不是数字，parse成数字会报错，这种可以用match来处理。</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"let guess: u32 = match guess.trim().parse() {\n  Ok(num) =&gt; num,\n  Err(_) =&gt; continue,\n};\"><pre><span class=\"pl-k\">let</span> guess: <span class=\"pl-k\">u32</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">match</span> guess.<span class=\"pl-en\">trim</span>().<span class=\"pl-en\">parse</span>() {\n  <span class=\"pl-c1\">Ok</span>(num) <span class=\"pl-k\">=&gt;</span> num,\n  <span class=\"pl-c1\">Err</span>(_) <span class=\"pl-k\">=&gt;</span> <span class=\"pl-k\">continue</span>,\n};</pre></div>\n</li>\n</ul>"},"__N_SSG":true}