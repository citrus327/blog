{"pageProps":{"html":"<h1 dir=\"auto\">记一次Electron开发全过程</h1>\n<p dir=\"auto\">[[toc]]</p>\n<h2 dir=\"auto\">引子</h2>\n<p dir=\"auto\">有一个需要开发PC桌面端的需求。日常中使用的网易云音乐，Twitch client等都属于electron的产品。<br>\nElectron对于前端开发来说上手非常简单，虽早有耳闻electron的强大，也看过一些文档和基本实现，但是没有完整的搭建、开发和维护过一个electron项目。借这个机会，熟悉一下electron技术栈，也写下本文，做一次技术积累。</p>\n<h2 dir=\"auto\">Electron</h2>\n<p dir=\"auto\">Electron分为Main进程（主进程）和Renderer进程（渲染进程）</p>\n<p dir=\"auto\">主进程为Node.js服务端环境，负责数据库处理，文件处理等</p>\n<p dir=\"auto\">渲染进程为浏览器环境</p>\n<p dir=\"auto\">主进程会将渲染进程的html，创建window，挂载html运行</p>\n<p dir=\"auto\">主进程与渲染进程通过electron包提供的ipcMain和ipcRenderer进行进程通讯。其实就是一个EventEmitter，发布订阅模式。</p>\n<h2 dir=\"auto\">项目搭建</h2>\n<h3 dir=\"auto\">起步</h3>\n<p dir=\"auto\">项目开始基本跟着首页的<a href=\"https://electronjs.org/docs/tutorial/development-environment#setting-up-windows\" rel=\"nofollow\">文档</a>一步步走。</p>\n<h3 dir=\"auto\">脚手架</h3>\n<p dir=\"auto\">直到<a href=\"https://electronjs.org/docs/tutorial/boilerplates-and-clis\" rel=\"nofollow\">Boilerplates and CLIs</a>这一章。这一章开头也提到了说Electron只是提供了一种基于chromium渲染的桌面端包装而已。对于如何开发、构建、打包等是\"unopinionated\"。这一章中提到了很多的boilerplate和CLI的方案。</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">electron-forge</code></li>\n<li><code class=\"notranslate\">electron-builder</code></li>\n<li><code class=\"notranslate\">electron-react-boilerplate</code></li>\n</ol>\n<p dir=\"auto\">前两者是比较基本的脚手架。不限制renderer部分选型。<code class=\"notranslate\">electron-react-boilerplate</code>这个从名字看就基本限定死React了。由于时间紧迫，React的水平也确实有限。只能在前两者里挑选。</p>\n<p dir=\"auto\">对于前两个脚手架，我选的是star数较多的electron-builder，时间有限，仅能基于star数选型了。</p>\n<h3 dir=\"auto\">electron-builder</h3>\n<p dir=\"auto\">使用<code class=\"notranslate\">yarn add electron-builder --dev</code>安装。同时electron-builder本身也提供了一些<a href=\"https://www.electron.build/#boilerplates\" rel=\"nofollow\">模板项目</a>供快速开发参考。</p>\n<p dir=\"auto\">这里的我使用<a href=\"https://nklayman.github.io/vue-cli-plugin-electron-builder/\" rel=\"nofollow\">vue-cli-plugin-electron-builder</a>进行项目搭建。这个是基于Vue CLI3的插件。关于Vue CLI3的安装和插件的安装在此不做赘述。</p>\n<h3 dir=\"auto\">vue-cli-plugin-electron-builder插件配置</h3>\n<p dir=\"auto\">由于这个插件是Vue CLI的插件，那配置文件理所应当在vue.config.js内。<br>\n贴上我目前的项目配置：</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"module.exports = {\n  pluginOptions: {\n    electronBuilder: {\n      builderOptions: {\n        &quot;appId&quot;: &quot;com.example.app&quot;,\n        &quot;productName&quot;: &quot;test-app&quot;,\n        directories: {\n          buildResources: './build',\n          output: &quot;./dist&quot;\n        },\n        &quot;win&quot;:{//win相关配置\n          &quot;icon&quot;:&quot;./build/icon.png&quot;,//图标，当前图标在根目录下，注意这里有两个坑\n          &quot;target&quot;: [\n            {\n              &quot;target&quot;: &quot;nsis&quot;,//利用nsis制作安装程序,\n              &quot;arch&quot;: [\n                &quot;x64&quot;,//64位\n                &quot;ia32&quot;//32位\n              ]\n            }\n          ],\n        },\n        &quot;nsis&quot;: {\n          &quot;allowToChangeInstallationDirectory&quot;: true,\n          oneClick: false,\n        }\n      }\n    }\n  }\n}\"><pre><span class=\"pl-smi\">module</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">exports</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">pluginOptions</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">electronBuilder</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-c1\">builderOptions</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">\"appId\"</span>: <span class=\"pl-s\">\"com.example.app\"</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"productName\"</span>: <span class=\"pl-s\">\"test-app\"</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">directories</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c1\">buildResources</span>: <span class=\"pl-s\">'./build'</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">output</span>: <span class=\"pl-s\">\"./dist\"</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"win\"</span>:<span class=\"pl-kos\">{</span><span class=\"pl-c\">//win相关配置</span>\n          <span class=\"pl-s\">\"icon\"</span>:<span class=\"pl-s\">\"./build/icon.png\"</span><span class=\"pl-kos\">,</span><span class=\"pl-c\">//图标，当前图标在根目录下，注意这里有两个坑</span>\n          <span class=\"pl-s\">\"target\"</span>: <span class=\"pl-kos\">[</span>\n            <span class=\"pl-kos\">{</span>\n              <span class=\"pl-s\">\"target\"</span>: <span class=\"pl-s\">\"nsis\"</span><span class=\"pl-kos\">,</span><span class=\"pl-c\">//利用nsis制作安装程序,</span>\n              <span class=\"pl-s\">\"arch\"</span>: <span class=\"pl-kos\">[</span>\n                <span class=\"pl-s\">\"x64\"</span><span class=\"pl-kos\">,</span><span class=\"pl-c\">//64位</span>\n                <span class=\"pl-s\">\"ia32\"</span><span class=\"pl-c\">//32位</span>\n              <span class=\"pl-kos\">]</span>\n            <span class=\"pl-kos\">}</span>\n          <span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-s\">\"nsis\"</span>: <span class=\"pl-kos\">{</span>\n          <span class=\"pl-s\">\"allowToChangeInstallationDirectory\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n          <span class=\"pl-c1\">oneClick</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h2 dir=\"auto\">项目结构</h2>\n<ol dir=\"auto\">\n<li>build文件夹<br>\n存放�打包需要的文件，例如icon等</li>\n<li>public文件夹\n<ul dir=\"auto\">\n<li>静态文件夹</li>\n<li>包含渲染进程favcon.ico,index.html等静态文件</li>\n</ul>\n</li>\n<li>src文件夹\n<ul dir=\"auto\">\n<li>项目代码</li>\n<li>-assets: 渲染进程静态文件夹</li>\n<li>-biz: 主进程业务代码</li>\n<li>-components: Vue.js组件</li>\n<li>-plugins: Vue.js插件</li>\n<li>-router: Vue-router</li>\n<li>-store: Vuex</li>\n<li>-views: Vue.js主视图</li>\n<li>background.js: 主进程入口</li>\n<li>main.js 渲染进程入口</li>\n</ul>\n</li>\n<li>vue.config.js\n<ul dir=\"auto\">\n<li>vue-cli3的配置文件</li>\n</ul>\n</li>\n</ol>\n<h2 dir=\"auto\">主进程与渲染进程通讯</h2>\n<p dir=\"auto\">由于electron是一个unopinioned工具，他仅仅提供了进程通讯的方式，而对于如何组织通讯代码，如何封装API是没有一个最优解的。在这我会放出我对于进程通讯的二次封装。</p>\n<h3 dir=\"auto\">概念描述</h3>\n<p dir=\"auto\">首先定义几个概念</p>\n<ol dir=\"auto\">\n<li>API\n<ul dir=\"auto\">\n<li>应用程序接口。</li>\n<li>这里的API是给调用方使用的，也就是渲染进程。</li>\n</ul>\n</li>\n<li>Payload Type\n<ul dir=\"auto\">\n<li>荷载类型。</li>\n<li>定义业务类型（事件类型），其实也就是潜在的定义了业务入参和负责业务的具体描述。</li>\n</ul>\n</li>\n<li>Routes\n<ul dir=\"auto\">\n<li>路由。</li>\n<li>分发绑定业务句柄和业务类型。</li>\n</ul>\n</li>\n<li>Services\n<ul dir=\"auto\">\n<li>服务。</li>\n<li>纯净的业务处理，会涉及业务数据处理，db操作等。</li>\n</ul>\n</li>\n</ol>\n<h3 dir=\"auto\">路由与业务绑定</h3>\n<p dir=\"auto\">先放出Payload Type的定义</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const PAYLOAD_TYPES = Object.freeze({\n  FETCH_FULL_DATA: 'FETCH_FULL_DATA',\n  FETCH_DROPDOWN_LIST: 'FETCH_DROPDOWN_LIST',\n  UPDATE_CELL: 'UPDATE_CELL',\n  SORT_SHEET: 'SORT_SHEET',\n  VALIDATE_SHEET: 'VALIDATE_SHEET',\n  CALCULATE_SHEET: 'CALCULATE_SHEET',\n  FETCH_INITIAL_DATA: 'FETCH_INITIAL_DATA',\n  DELETE_ROW: 'DELETE_ROW'\n})\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-c1\">PAYLOAD_TYPES</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">freeze</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">FETCH_FULL_DATA</span>: <span class=\"pl-s\">'FETCH_FULL_DATA'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">FETCH_DROPDOWN_LIST</span>: <span class=\"pl-s\">'FETCH_DROPDOWN_LIST'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">UPDATE_CELL</span>: <span class=\"pl-s\">'UPDATE_CELL'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">SORT_SHEET</span>: <span class=\"pl-s\">'SORT_SHEET'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">VALIDATE_SHEET</span>: <span class=\"pl-s\">'VALIDATE_SHEET'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">CALCULATE_SHEET</span>: <span class=\"pl-s\">'CALCULATE_SHEET'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">FETCH_INITIAL_DATA</span>: <span class=\"pl-s\">'FETCH_INITIAL_DATA'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">DELETE_ROW</span>: <span class=\"pl-s\">'DELETE_ROW'</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Routes会基于Payload Type进行类型和句柄的绑定，句柄内调用Services进行业务处理。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { PAYLOAD_TYPES } from './constants'\nimport * as service from '../service'\n\nexport default {\n  [PAYLOAD_TYPES.FETCH_FULL_DATA]: function (payload, callback) {\n    callback(service.fetchFullData(payload))\n  },\n  [PAYLOAD_TYPES.FETCH_DROPDOWN_LIST]: function (payload, callback) {\n    callback(service.fetchDropdownList(payload))\n  },\n  [PAYLOAD_TYPES.UPDATE_CELL]: function (payload, callback) {\n    callback(service.updateCell(payload))\n  }\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">PAYLOAD_TYPES</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'./constants'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-c1\">*</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">service</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../service'</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-c1\">PAYLOAD_TYPES</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">FETCH_FULL_DATA</span><span class=\"pl-kos\">]</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">service</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fetchFullData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-c1\">PAYLOAD_TYPES</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">FETCH_DROPDOWN_LIST</span><span class=\"pl-kos\">]</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">service</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">fetchDropdownList</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">[</span><span class=\"pl-c1\">PAYLOAD_TYPES</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">UPDATE_CELL</span><span class=\"pl-kos\">]</span>: <span class=\"pl-k\">function</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">service</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">updateCell</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">绑定路由至主进程</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const establishConnection = () =&gt; {\n  Object.keys(routes).forEach((routeName) =&gt; {\n    ipcMain.on(routeName, (e, payload) =&gt; {\n      routes[routeName](payload, (respond) =&gt; {\n        e.sender.send(routeName, respond)\n      })\n    })\n  })\n}\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-en\">establishConnection</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-v\">Object</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">keys</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">routes</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">routeName</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">ipcMain</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">on</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">routeName</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">routes</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">routeName</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">payload</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">respond</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s1\">e</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sender</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">send</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">routeName</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">respond</span><span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">API声明</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import { ipcRenderer } from 'electron'\nimport { PAYLOAD_TYPES } from '../channel/constants'\nexport default function fetchFullData(sheetName) {\n  return new Promise((resolve, reject) =&gt; {\n    // 定义请求参数\n    const payload = {\n      sheetName\n    }\n\n    // 发送请求\n    ipcRenderer.send(PAYLOAD_TYPES.FETCH_FULL_DATA, payload)\n\n    // 接受响应给callback\n    ipcRenderer.once(PAYLOAD_TYPES.FETCH_FULL_DATA, (e, res) =&gt; {\n      resolve(res)\n    })\n  })\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">ipcRenderer</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'electron'</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">PAYLOAD_TYPES</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'../channel/constants'</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">fetchFullData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sheetName</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">reject</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 定义请求参数</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">payload</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span>\n      sheetName\n    <span class=\"pl-kos\">}</span>\n\n    <span class=\"pl-c\">// 发送请求</span>\n    <span class=\"pl-s1\">ipcRenderer</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">send</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">PAYLOAD_TYPES</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">FETCH_FULL_DATA</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">payload</span><span class=\"pl-kos\">)</span>\n\n    <span class=\"pl-c\">// 接受响应给callback</span>\n    <span class=\"pl-s1\">ipcRenderer</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">once</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">PAYLOAD_TYPES</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">FETCH_FULL_DATA</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">res</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">�以上操作之后，API部分只要处理payload参数，发送到对应payload type的频道和绑定相应类型的响应句柄就可以了。</p>\n<p dir=\"auto\">这样API的入参很清晰，回参就是service的回参。一番映射之后，API和Services的逻辑就相当纯净了，无需考虑ipcMain和ipcRenderer等一系列Electron相关的通讯操作。</p>\n<p dir=\"auto\">新增API也只需要定义payload type，定义api，映射payload type和句柄，调用service就行了。</p>\n<p dir=\"auto\">这套设计的优点在于，基本API, Routes，Service的创建只需要copy过去就能行，改改payload和方法名称，设计一下入参即可。之后的开发就可以完全沉浸在Services这一层里。</p>\n<p dir=\"auto\">这套设计借鉴了Redux和Node.js里很多框架都采用的中心化路由映射的思想。</p>\n<h2 dir=\"auto\">数据存储</h2>\n<p dir=\"auto\">数据存储的话由于数据比较简单，目前我遇到的业务需求，基本一个mongodb就能够搞定。但是由于是electron，肯定不希望往使用方电脑装太多东西，其实mongodb也就是个json。那只需要找一个简单、成熟、语法友好的基于json的本地持久化工具即可。</p>\n<p dir=\"auto\">在这里使用<a href=\"https://github.com/typicode/lowdb\">lowdb</a></p>\n<h3 dir=\"auto\">数据持久化</h3>\n<p dir=\"auto\">db文件放在user data里做持久化。<br>\n获取user data的方法：<a href=\"https://electronjs.org/docs/api/app#appgetpathname\" rel=\"nofollow\">app.getPath()</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const filePath = path.join(app.getPath('userData'), '/data.json')\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">filePath</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">join</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getPath</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'userData'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'/data.json'</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">lowdb</h3>\n<p dir=\"auto\">lowdb是基于lodash API的json持久化工具。前端做久了，Lodash肯定是知道的，语法也比较熟。在这放出一些简单的db操作</p>\n<h4 dir=\"auto\">初始化</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst filePath = path.join(app.getPath('userData'), '/data.json')\nconst adapter = new FileSync(filePath)\nconst db = low(adapter)\"><pre><span class=\"pl-k\">const</span> <span class=\"pl-s1\">low</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'lowdb'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">FileSync</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">require</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'lowdb/adapters/FileSync'</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">filePath</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">join</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">app</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">getPath</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'userData'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'/data.json'</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">adapter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">FileSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">filePath</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">db</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">low</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">adapter</span><span class=\"pl-kos\">)</span></pre></div>\n<h4 dir=\"auto\">db操作-增删改查</h4>\n<p dir=\"auto\">增</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"db.get('posts')\n  .push({title: 'example'})\n  .write()\"><pre><span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">push</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-c1\">title</span>: <span class=\"pl-s\">'example'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">删</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"db.get('posts')\n  .remove({title: 'example'})\n  .write()\"><pre><span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">remove</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span><span class=\"pl-c1\">title</span>: <span class=\"pl-s\">'example'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">改</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"db.get('posts')\n  .find({ title: 'example' })\n  .assign({ title: 'hi!'})\n  .write()\"><pre><span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">find</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">title</span>: <span class=\"pl-s\">'example'</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">assign</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">title</span>: <span class=\"pl-s\">'hi!'</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n  <span class=\"pl-kos\">.</span><span class=\"pl-en\">write</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">查</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"db.get('posts').value()\"><pre><span class=\"pl-s1\">db</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">get</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'posts'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">value</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">渲染进程</h2>\n<p dir=\"auto\">因为是基于Vue CLI搭的项目，那渲染进程这边肯定是选用Vue.js作为前端选型。到这里基本就跟普通web前端开发一样了。<br>\n业务就调用API就行了。</p>\n<h2 dir=\"auto\">打包</h2>\n<p dir=\"auto\">electron-builder提供了很多的配置项。参考<a href=\"https://www.electron.build/configuration/configuration\" rel=\"nofollow\">https://www.electron.build/configuration/configuration</a></p>\n<p dir=\"auto\">配置文件也已经在上文中给出。</p>\n<h2 dir=\"auto\">总结</h2>\n<p dir=\"auto\">整个项目从构思到搭建，再到开发流程基本没采坑，主要还是因为文档比较给力。</p>\n<p dir=\"auto\">感觉唯一学到的东西就是终于有一套构建桌面端的解决方案了。。</p>\n<p dir=\"auto\">如果有后续更新会在此补充，感谢阅读。</p>"},"__N_SSG":true}